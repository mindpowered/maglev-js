XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;
// Generated by Haxe 4.1.1
var $hx_exports = typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this;
(function ($global) { "use strict";
$hx_exports["maglev"] = $hx_exports["maglev"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""));
	}
	match(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	matched(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	matchedLeft() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return HxOverrides.substr(this.r.s,0,this.r.m.index);
	}
	matchedRight() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		let sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	matchedPos() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	matchSub(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			let b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			let b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	split(s) {
		let d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	replace(s,by) {
		return s.replace(this.r,by);
	}
	map(s,f) {
		let offset = 0;
		let buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			let p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	static escape(s) {
		return s.replace(EReg.escapeRe,"\\$&");
	}
}
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
Object.assign(EReg.prototype, {
	__class__: EReg
	,r: null
});
class EnumValue {
	static match(this1,pattern) {
		return false;
	}
}
class HxOverrides {
	static dateStr(date) {
		let m = date.getMonth() + 1;
		let d = date.getDate();
		let h = date.getHours();
		let mi = date.getMinutes();
		let s = date.getSeconds();
		return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
	}
	static strDate(s) {
		switch(s.length) {
		case 8:
			let k = s.split(":");
			let d = new Date();
			d["setTime"](0);
			d["setUTCHours"](k[0]);
			d["setUTCMinutes"](k[1]);
			d["setUTCSeconds"](k[2]);
			return d;
		case 10:
			let k1 = s.split("-");
			return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
		case 19:
			let k2 = s.split(" ");
			let y = k2[0].split("-");
			let t = k2[1].split(":");
			return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
		default:
			throw haxe_Exception.thrown("Invalid date format : " + s);
		}
	}
	static cca(s,index) {
		let x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static indexOf(a,obj,i) {
		let len = a.length;
		if(i < 0) {
			i += len;
			if(i < 0) {
				i = 0;
			}
		}
		while(i < len) {
			if(((a[i]) === obj)) {
				return i;
			}
			++i;
		}
		return -1;
	}
	static lastIndexOf(a,obj,i) {
		let len = a.length;
		if(i >= len) {
			i = len - 1;
		} else if(i < 0) {
			i += len;
		}
		while(i >= 0) {
			if(((a[i]) === obj)) {
				return i;
			}
			--i;
		}
		return -1;
	}
	static remove(a,obj) {
		let i = a.indexOf(obj);
		if(i == -1) {
			return false;
		}
		a.splice(i,1);
		return true;
	}
	static iter(a) {
		return { cur : 0, arr : a, hasNext : function() {
			return this.cur < this.arr.length;
		}, next : function() {
			return this.arr[this.cur++];
		}};
	}
	static keyValueIter(a) {
		return new haxe_iterators_ArrayKeyValueIterator(a);
	}
	static now() {
		return Date.now();
	}
}
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
class IntIterator {
	constructor(min,max) {
		this.min = min;
		this.max = max;
	}
	hasNext() {
		return this.min < this.max;
	}
	next() {
		return this.min++;
	}
}
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = "IntIterator";
Object.assign(IntIterator.prototype, {
	__class__: IntIterator
	,min: null
	,max: null
});
class Lambda {
	static array(it) {
		let a = [];
		let i = $getIterator(it);
		while(i.hasNext()) {
			let i1 = i.next();
			a.push(i1);
		}
		return a;
	}
	static list(it) {
		let l = new haxe_ds_List();
		let i = $getIterator(it);
		while(i.hasNext()) {
			let i1 = i.next();
			l.add(i1);
		}
		return l;
	}
	static map(it,f) {
		let _g = [];
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			_g.push(f(x1));
		}
		return _g;
	}
	static mapi(it,f) {
		let i = 0;
		let _g = [];
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			_g.push(f(i++,x1));
		}
		return _g;
	}
	static flatten(it) {
		let _g = [];
		let e = $getIterator(it);
		while(e.hasNext()) {
			let e1 = e.next();
			let x = $getIterator(e1);
			while(x.hasNext()) {
				let x1 = x.next();
				_g.push(x1);
			}
		}
		return _g;
	}
	static flatMap(it,f) {
		let _g = [];
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			_g.push(f(x1));
		}
		let _g1 = [];
		let e = $getIterator(_g);
		while(e.hasNext()) {
			let e1 = e.next();
			let x = $getIterator(e1);
			while(x.hasNext()) {
				let x1 = x.next();
				_g1.push(x1);
			}
		}
		return _g1;
	}
	static has(it,elt) {
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			if(x1 == elt) {
				return true;
			}
		}
		return false;
	}
	static exists(it,f) {
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			if(f(x1)) {
				return true;
			}
		}
		return false;
	}
	static foreach(it,f) {
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			if(!f(x1)) {
				return false;
			}
		}
		return true;
	}
	static iter(it,f) {
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			f(x1);
		}
	}
	static filter(it,f) {
		let _g = [];
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			if(f(x1)) {
				_g.push(x1);
			}
		}
		return _g;
	}
	static fold(it,f,first) {
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			first = f(x1,first);
		}
		return first;
	}
	static foldi(it,f,first) {
		let i = 0;
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			first = f(x1,first,i);
			++i;
		}
		return first;
	}
	static count(it,pred) {
		let n = 0;
		if(pred == null) {
			let _ = $getIterator(it);
			while(_.hasNext()) {
				let _1 = _.next();
				++n;
			}
		} else {
			let x = $getIterator(it);
			while(x.hasNext()) {
				let x1 = x.next();
				if(pred(x1)) {
					++n;
				}
			}
		}
		return n;
	}
	static empty(it) {
		return !$getIterator(it).hasNext();
	}
	static indexOf(it,v) {
		let i = 0;
		let v2 = $getIterator(it);
		while(v2.hasNext()) {
			let v21 = v2.next();
			if(v == v21) {
				return i;
			}
			++i;
		}
		return -1;
	}
	static find(it,f) {
		let v = $getIterator(it);
		while(v.hasNext()) {
			let v1 = v.next();
			if(f(v1)) {
				return v1;
			}
		}
		return null;
	}
	static findIndex(it,f) {
		let i = 0;
		let v = $getIterator(it);
		while(v.hasNext()) {
			let v1 = v.next();
			if(f(v1)) {
				return i;
			}
			++i;
		}
		return -1;
	}
	static concat(a,b) {
		let l = [];
		let x = $getIterator(a);
		while(x.hasNext()) {
			let x1 = x.next();
			l.push(x1);
		}
		let x1 = $getIterator(b);
		while(x1.hasNext()) {
			let x = x1.next();
			l.push(x);
		}
		return l;
	}
}
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Math.__name__ = "Math";
class Reflect {
	static hasField(o,field) {
		return Object.prototype.hasOwnProperty.call(o,field);
	}
	static field(o,field) {
		try {
			return o[field];
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return null;
		}
	}
	static setField(o,field,value) {
		o[field] = value;
	}
	static getProperty(o,field) {
		let tmp;
		if(o == null) {
			return null;
		} else {
			let tmp1;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + field];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				return o[tmp]();
			} else {
				return o[field];
			}
		}
	}
	static setProperty(o,field,value) {
		let tmp;
		let tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["set_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			o[tmp](value);
		} else {
			o[field] = value;
		}
	}
	static callMethod(o,func,args) {
		return func.apply(o,args);
	}
	static fields(o) {
		let a = [];
		if(o != null) {
			let hasOwnProperty = Object.prototype.hasOwnProperty;
			for( var f in o ) {
			if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
				a.push(f);
			}
			}
		}
		return a;
	}
	static isFunction(f) {
		if(typeof(f) == "function") {
			return !(f.__name__ || f.__ename__);
		} else {
			return false;
		}
	}
	static compare(a,b) {
		if(a == b) {
			return 0;
		} else if(a > b) {
			return 1;
		} else {
			return -1;
		}
	}
	static compareMethods(f1,f2) {
		if(f1 == f2) {
			return true;
		}
		if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
			return false;
		}
		if(f1.scope == f2.scope && f1.method == f2.method) {
			return f1.method != null;
		} else {
			return false;
		}
	}
	static isObject(v) {
		if(v == null) {
			return false;
		}
		let t = typeof(v);
		if(!(t == "string" || t == "object" && v.__enum__ == null)) {
			if(t == "function") {
				return (v.__name__ || v.__ename__) != null;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static isEnumValue(v) {
		if(v != null) {
			return v.__enum__ != null;
		} else {
			return false;
		}
	}
	static deleteField(o,field) {
		if(!Object.prototype.hasOwnProperty.call(o,field)) {
			return false;
		}
		delete(o[field]);
		return true;
	}
	static copy(o) {
		if(o == null) {
			return null;
		}
		let o2 = { };
		let _g = 0;
		let _g1 = Reflect.fields(o);
		while(_g < _g1.length) {
			let f = _g1[_g];
			++_g;
			o2[f] = Reflect.field(o,f);
		}
		return o2;
	}
	static makeVarArgs(f) {
		return function() {
			let a = Array.prototype.slice;
			let a1 = arguments;
			let a2 = a.call(a1);
			return f(a2);
		};
	}
}
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
class Std {
	static is(v,t) {
		return js_Boot.__instanceof(v,t);
	}
	static isOfType(v,t) {
		return js_Boot.__instanceof(v,t);
	}
	static downcast(value,c) {
		if(js_Boot.__downcastCheck(value,c)) {
			return value;
		} else {
			return null;
		}
	}
	static instance(value,c) {
		if(js_Boot.__downcastCheck(value,c)) {
			return value;
		} else {
			return null;
		}
	}
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
	static int(x) {
		return x | 0;
	}
	static parseInt(x) {
		if(x != null) {
			let _g = 0;
			let _g1 = x.length;
			while(_g < _g1) {
				let i = _g++;
				let c = x.charCodeAt(i);
				if(c <= 8 || c >= 14 && c != 32 && c != 45) {
					let nc = x.charCodeAt(i + 1);
					let v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
					if(isNaN(v)) {
						return null;
					} else {
						return v;
					}
				}
			}
		}
		return null;
	}
	static parseFloat(x) {
		return parseFloat(x);
	}
	static random(x) {
		if(x <= 0) {
			return 0;
		} else {
			return Math.floor(Math.random() * x);
		}
	}
}
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
class StringBuf {
	constructor() {
		this.b = "";
	}
	get_length() {
		return this.b.length;
	}
	add(x) {
		this.b += Std.string(x);
	}
	addChar(c) {
		this.b += String.fromCodePoint(c);
	}
	addSub(s,pos,len) {
		this.b += len == null ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len);
	}
	toString() {
		return this.b;
	}
}
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
Object.assign(StringBuf.prototype, {
	__class__: StringBuf
	,b: null
	,__properties__: {get_length: "get_length"}
});
class haxe_SysTools {
	static quoteUnixArg(argument) {
		if(argument == "") {
			return "''";
		}
		if(!new EReg("[^a-zA-Z0-9_@%+=:,./-]","").match(argument)) {
			return argument;
		}
		return "'" + StringTools.replace(argument,"'","'\"'\"'") + "'";
	}
	static quoteWinArg(argument,escapeMetaCharacters) {
		if(!new EReg("^[^ \t\\\\\"]+$","").match(argument)) {
			let result_b = "";
			let needquote = argument.indexOf(" ") != -1 || argument.indexOf("\t") != -1 || argument == "";
			if(needquote) {
				result_b += "\"";
			}
			let bs_buf = new StringBuf();
			let _g = 0;
			let _g1 = argument.length;
			while(_g < _g1) {
				let i = _g++;
				let _g1 = HxOverrides.cca(argument,i);
				if(_g1 == null) {
					let c = _g1;
					if(bs_buf.b.length > 0) {
						result_b += Std.string(bs_buf.b);
						bs_buf = new StringBuf();
					}
					result_b += String.fromCodePoint(c);
				} else {
					switch(_g1) {
					case 34:
						let bs = bs_buf.b;
						result_b += bs == null ? "null" : "" + bs;
						result_b += bs == null ? "null" : "" + bs;
						bs_buf = new StringBuf();
						result_b += "\\\"";
						break;
					case 92:
						bs_buf.b += "\\";
						break;
					default:
						let c = _g1;
						if(bs_buf.b.length > 0) {
							result_b += Std.string(bs_buf.b);
							bs_buf = new StringBuf();
						}
						result_b += String.fromCodePoint(c);
					}
				}
			}
			result_b += Std.string(bs_buf.b);
			if(needquote) {
				result_b += Std.string(bs_buf.b);
				result_b += "\"";
			}
			argument = result_b;
		}
		if(escapeMetaCharacters) {
			let result_b = "";
			let _g = 0;
			let _g1 = argument.length;
			while(_g < _g1) {
				let i = _g++;
				let c = HxOverrides.cca(argument,i);
				if(haxe_SysTools.winMetaCharacters.indexOf(c) >= 0) {
					result_b += String.fromCodePoint(94);
				}
				result_b += String.fromCodePoint(c);
			}
			return result_b;
		} else {
			return argument;
		}
	}
}
$hxClasses["haxe.SysTools"] = haxe_SysTools;
haxe_SysTools.__name__ = "haxe.SysTools";
class StringTools {
	static urlEncode(s) {
		return encodeURIComponent(s);
	}
	static urlDecode(s) {
		return decodeURIComponent(s.split("+").join(" "));
	}
	static htmlEscape(s,quotes) {
		let buf_b = "";
		let _g_offset = 0;
		let _g_s = s;
		while(_g_offset < _g_s.length) {
			let s = _g_s;
			let index = _g_offset++;
			let c = s.charCodeAt(index);
			if(c >= 55296 && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
			}
			let c1 = c;
			if(c1 >= 65536) {
				++_g_offset;
			}
			let code = c1;
			switch(code) {
			case 34:
				if(quotes) {
					buf_b += "&quot;";
				} else {
					buf_b += String.fromCodePoint(code);
				}
				break;
			case 38:
				buf_b += "&amp;";
				break;
			case 39:
				if(quotes) {
					buf_b += "&#039;";
				} else {
					buf_b += String.fromCodePoint(code);
				}
				break;
			case 60:
				buf_b += "&lt;";
				break;
			case 62:
				buf_b += "&gt;";
				break;
			default:
				buf_b += String.fromCodePoint(code);
			}
		}
		return buf_b;
	}
	static htmlUnescape(s) {
		return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
	}
	static contains(s,value) {
		return s.indexOf(value) != -1;
	}
	static startsWith(s,start) {
		if(s.length >= start.length) {
			return s.lastIndexOf(start,0) == 0;
		} else {
			return false;
		}
	}
	static endsWith(s,end) {
		let elen = end.length;
		let slen = s.length;
		if(slen >= elen) {
			return s.indexOf(end,slen - elen) == slen - elen;
		} else {
			return false;
		}
	}
	static isSpace(s,pos) {
		let c = HxOverrides.cca(s,pos);
		if(!(c > 8 && c < 14)) {
			return c == 32;
		} else {
			return true;
		}
	}
	static ltrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,r)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,r,l - r);
		} else {
			return s;
		}
	}
	static rtrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,0,l - r);
		} else {
			return s;
		}
	}
	static trim(s) {
		return StringTools.ltrim(StringTools.rtrim(s));
	}
	static lpad(s,c,l) {
		if(c.length <= 0) {
			return s;
		}
		let buf_b = "";
		l -= s.length;
		while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
		buf_b += s == null ? "null" : "" + s;
		return buf_b;
	}
	static rpad(s,c,l) {
		if(c.length <= 0) {
			return s;
		}
		let buf_b = "";
		buf_b += s == null ? "null" : "" + s;
		while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
		return buf_b;
	}
	static replace(s,sub,by) {
		return s.split(sub).join(by);
	}
	static hex(n,digits) {
		let s = "";
		let hexChars = "0123456789ABCDEF";
		while(true) {
			s = hexChars.charAt(n & 15) + s;
			n >>>= 4;
			if(!(n > 0)) {
				break;
			}
		}
		if(digits != null) {
			while(s.length < digits) s = "0" + s;
		}
		return s;
	}
	static fastCodeAt(s,index) {
		return s.charCodeAt(index);
	}
	static iterator(s) {
		return new haxe_iterators_StringIterator(s);
	}
	static keyValueIterator(s) {
		return new haxe_iterators_StringKeyValueIterator(s);
	}
	static isEof(c) {
		return c != c;
	}
	static quoteUnixArg(argument) {
		if(argument == "") {
			return "''";
		} else if(!new EReg("[^a-zA-Z0-9_@%+=:,./-]","").match(argument)) {
			return argument;
		} else {
			return "'" + StringTools.replace(argument,"'","'\"'\"'") + "'";
		}
	}
	static quoteWinArg(argument,escapeMetaCharacters) {
		let argument1 = argument;
		if(!new EReg("^[^ \t\\\\\"]+$","").match(argument1)) {
			let result_b = "";
			let needquote = argument1.indexOf(" ") != -1 || argument1.indexOf("\t") != -1 || argument1 == "";
			if(needquote) {
				result_b += "\"";
			}
			let bs_buf = new StringBuf();
			let _g = 0;
			let _g1 = argument1.length;
			while(_g < _g1) {
				let i = _g++;
				let _g1 = HxOverrides.cca(argument1,i);
				if(_g1 == null) {
					let c = _g1;
					if(bs_buf.b.length > 0) {
						result_b += Std.string(bs_buf.b);
						bs_buf = new StringBuf();
					}
					result_b += String.fromCodePoint(c);
				} else {
					switch(_g1) {
					case 34:
						let bs = bs_buf.b;
						result_b += Std.string(bs);
						result_b += Std.string(bs);
						bs_buf = new StringBuf();
						result_b += "\\\"";
						break;
					case 92:
						bs_buf.b += "\\";
						break;
					default:
						let c = _g1;
						if(bs_buf.b.length > 0) {
							result_b += Std.string(bs_buf.b);
							bs_buf = new StringBuf();
						}
						result_b += String.fromCodePoint(c);
					}
				}
			}
			result_b += Std.string(bs_buf.b);
			if(needquote) {
				result_b += Std.string(bs_buf.b);
				result_b += "\"";
			}
			argument1 = result_b;
		}
		if(escapeMetaCharacters) {
			let result_b = "";
			let _g = 0;
			let _g1 = argument1.length;
			while(_g < _g1) {
				let i = _g++;
				let c = HxOverrides.cca(argument1,i);
				if(haxe_SysTools.winMetaCharacters.indexOf(c) >= 0) {
					result_b += String.fromCodePoint(94);
				}
				result_b += String.fromCodePoint(c);
			}
			return result_b;
		} else {
			return argument1;
		}
	}
	static utf16CodePointAt(s,index) {
		let c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		return c;
	}
}
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
class Type {
	static getClass(o) {
		return js_Boot.getClass(o);
	}
	static getEnum(o) {
		if(o == null) {
			return null;
		}
		return $hxEnums[o.__enum__];
	}
	static getSuperClass(c) {
		return c.__super__;
	}
	static getClassName(c) {
		return c.__name__;
	}
	static getEnumName(e) {
		return e.__ename__;
	}
	static resolveClass(name) {
		return $hxClasses[name];
	}
	static resolveEnum(name) {
		return $hxEnums[name];
	}
	static createInstance(cl,args) {
		let ctor = Function.prototype.bind.apply(cl,[null].concat(args));
		return new (ctor);
	}
	static createEmptyInstance(cl) {
		return Object.create(cl.prototype);
	}
	static createEnum(e,constr,params) {
		let f = Reflect.field(e,constr);
		if(f == null) {
			throw haxe_Exception.thrown("No such constructor " + constr);
		}
		if(Reflect.isFunction(f)) {
			if(params == null) {
				throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
			}
			return f.apply(e,params);
		}
		if(params != null && params.length != 0) {
			throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
		}
		return f;
	}
	static createEnumIndex(e,index,params) {
		let c = e.__constructs__[index];
		if(c == null) {
			throw haxe_Exception.thrown(index + " is not a valid enum constructor index");
		}
		return Type.createEnum(e,c,params);
	}
	static getInstanceFields(c) {
		let result = [];
		while(c != null) {
			let _g = 0;
			let _g1 = Object.getOwnPropertyNames(c.prototype);
			while(_g < _g1.length) {
				let name = _g1[_g];
				++_g;
				switch(name) {
				case "__class__":case "__properties__":case "constructor":
					break;
				default:
					if(result.indexOf(name) == -1) {
						result.push(name);
					}
				}
			}
			c = c.__super__;
		}
		return result;
	}
	static getClassFields(c) {
		let a = Object.getOwnPropertyNames(c);
		HxOverrides.remove(a,"__id__");
		HxOverrides.remove(a,"hx__closures__");
		HxOverrides.remove(a,"__name__");
		HxOverrides.remove(a,"__interfaces__");
		HxOverrides.remove(a,"__isInterface__");
		HxOverrides.remove(a,"__properties__");
		HxOverrides.remove(a,"__instanceFields__");
		HxOverrides.remove(a,"__super__");
		HxOverrides.remove(a,"__meta__");
		HxOverrides.remove(a,"prototype");
		HxOverrides.remove(a,"name");
		HxOverrides.remove(a,"length");
		return a;
	}
	static getEnumConstructs(e) {
		return e.__constructs__.slice();
	}
	static typeof(v) {
		switch(typeof(v)) {
		case "boolean":
			return ValueType.TBool;
		case "function":
			if(v.__name__ || v.__ename__) {
				return ValueType.TObject;
			}
			return ValueType.TFunction;
		case "number":
			if(Math.ceil(v) == v % 2147483648.0) {
				return ValueType.TInt;
			}
			return ValueType.TFloat;
		case "object":
			if(v == null) {
				return ValueType.TNull;
			}
			let e = v.__enum__;
			if(e != null) {
				return ValueType.TEnum($hxEnums[e]);
			}
			let c = js_Boot.getClass(v);
			if(c != null) {
				return ValueType.TClass(c);
			}
			return ValueType.TObject;
		case "string":
			return ValueType.TClass(String);
		case "undefined":
			return ValueType.TNull;
		default:
			return ValueType.TUnknown;
		}
	}
	static enumEq(a,b) {
		if(a == b) {
			return true;
		}
		try {
			let e = a.__enum__;
			if(e == null || e != b.__enum__) {
				return false;
			}
			if(a._hx_index != b._hx_index) {
				return false;
			}
			let enm = $hxEnums[e];
			let ctorName = enm.__constructs__[a._hx_index];
			let params = enm[ctorName].__params__;
			let _g = 0;
			while(_g < params.length) {
				let f = params[_g];
				++_g;
				if(!Type.enumEq(a[f],b[f])) {
					return false;
				}
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return false;
		}
		return true;
	}
	static enumConstructor(e) {
		return $hxEnums[e.__enum__].__constructs__[e._hx_index];
	}
	static enumParameters(e) {
		let enm = $hxEnums[e.__enum__];
		let ctorName = enm.__constructs__[e._hx_index];
		let params = enm[ctorName].__params__;
		if(params != null) {
			let _g = [];
			let _g1 = 0;
			while(_g1 < params.length) {
				let p = params[_g1];
				++_g1;
				_g.push(e[p]);
			}
			return _g;
		} else {
			return [];
		}
	}
	static enumIndex(e) {
		return e._hx_index;
	}
	static allEnums(e) {
		return e.__empty_constructs__.slice();
	}
}
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
class XmlType {
	static toString(this1) {
		switch(this1) {
		case 0:
			return "Element";
		case 1:
			return "PCData";
		case 2:
			return "CData";
		case 3:
			return "Comment";
		case 4:
			return "DocType";
		case 5:
			return "ProcessingInstruction";
		case 6:
			return "Document";
		}
	}
}
class Xml {
	constructor(nodeType) {
		this.nodeType = nodeType;
		this.children = [];
		this.attributeMap = new haxe_ds_StringMap();
	}
	get_nodeName() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.nodeName;
	}
	set_nodeName(v) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.nodeName = v;
	}
	get_nodeValue() {
		if(this.nodeType == Xml.Document || this.nodeType == Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, unexpected " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.nodeValue;
	}
	set_nodeValue(v) {
		if(this.nodeType == Xml.Document || this.nodeType == Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, unexpected " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.nodeValue = v;
	}
	get(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	set(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	remove(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		let _this = this.attributeMap;
		if(Object.prototype.hasOwnProperty.call(_this.h,att)) {
			delete(_this.h[att]);
		}
	}
	exists(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	attributes() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return haxe_ds_StringMap.keysIterator(this.attributeMap.h);
	}
	iterator() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return new haxe_iterators_ArrayIterator(this.children);
	}
	elements() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		let _g = [];
		let _g1 = 0;
		let _g2 = this.children;
		while(_g1 < _g2.length) {
			let child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		let ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	elementsNamed(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		let _g = [];
		let _g1 = 0;
		let _g2 = this.children;
		while(_g1 < _g2.length) {
			let child = _g2[_g1];
			++_g1;
			let tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		let ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	firstChild() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.children[0];
	}
	firstElement() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	addChild(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	removeChild(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	insertChild(x,pos) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			HxOverrides.remove(x.parent.children,x);
		}
		this.children.splice(pos,0,x);
		x.parent = this;
	}
	toString() {
		return haxe_xml_Printer.print(this);
	}
	ensureElementType() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
	}
	static parse(str) {
		return haxe_xml_Parser.parse(str);
	}
	static createElement(name) {
		let xml = new Xml(Xml.Element);
		if(xml.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		xml.nodeName = name;
		return xml;
	}
	static createPCData(data) {
		let xml = new Xml(Xml.PCData);
		if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		xml.nodeValue = data;
		return xml;
	}
	static createCData(data) {
		let xml = new Xml(Xml.CData);
		if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		xml.nodeValue = data;
		return xml;
	}
	static createComment(data) {
		let xml = new Xml(Xml.Comment);
		if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		xml.nodeValue = data;
		return xml;
	}
	static createDocType(data) {
		let xml = new Xml(Xml.DocType);
		if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		xml.nodeValue = data;
		return xml;
	}
	static createProcessingInstruction(data) {
		let xml = new Xml(Xml.ProcessingInstruction);
		if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		xml.nodeValue = data;
		return xml;
	}
	static createDocument() {
		return new Xml(Xml.Document);
	}
}
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Object.assign(Xml.prototype, {
	__class__: Xml
	,nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,__properties__: {set_nodeValue: "set_nodeValue",get_nodeValue: "get_nodeValue",set_nodeName: "set_nodeName",get_nodeName: "get_nodeName"}
});
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : "haxe.StackItem", __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
haxe_StackItem.__empty_constructs__ = [haxe_StackItem.CFunction];
class haxe_CallStack {
	static get_length(this1) {
		return this1.length;
	}
	static callStack() {
		return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
	}
	static exceptionStack() {
		let eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
		return haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
	}
	static toString(stack) {
		let b = new StringBuf();
		let _g = 0;
		let _g1 = stack;
		while(_g < _g1.length) {
			let s = _g1[_g];
			++_g;
			b.b += "\nCalled from ";
			haxe_CallStack.itemToString(b,s);
		}
		return b.b;
	}
	static subtract(this1,stack) {
		let startIndex = -1;
		let i = -1;
		while(++i < this1.length) {
			let _g = 0;
			let _g1 = stack.length;
			while(_g < _g1) {
				let j = _g++;
				if(haxe_CallStack.equalItems(this1[i],stack[j])) {
					if(startIndex < 0) {
						startIndex = i;
					}
					++i;
					if(i >= this1.length) {
						break;
					}
				} else {
					startIndex = -1;
				}
			}
			if(startIndex >= 0) {
				break;
			}
		}
		if(startIndex >= 0) {
			return this1.slice(0,startIndex);
		} else {
			return this1;
		}
	}
	static copy(this1) {
		return this1.slice();
	}
	static get(this1,index) {
		return this1[index];
	}
	static asArray(this1) {
		return this1;
	}
	static equalItems(item1,item2) {
		if(item1 == null) {
			if(item2 == null) {
				return true;
			} else {
				return false;
			}
		} else {
			switch(item1._hx_index) {
			case 0:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 0) {
					return true;
				} else {
					return false;
				}
				break;
			case 1:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 1) {
					let m1 = item1.m;
					let m2 = item2.m;
					return m1 == m2;
				} else {
					return false;
				}
				break;
			case 2:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 2) {
					let item11 = item1.s;
					let file1 = item1.file;
					let line1 = item1.line;
					let col1 = item1.column;
					let col2 = item2.column;
					let line2 = item2.line;
					let file2 = item2.file;
					let item21 = item2.s;
					if(file1 == file2 && line1 == line2 && col1 == col2) {
						return haxe_CallStack.equalItems(item11,item21);
					} else {
						return false;
					}
				} else {
					return false;
				}
				break;
			case 3:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 3) {
					let class1 = item1.classname;
					let method1 = item1.method;
					let method2 = item2.method;
					let class2 = item2.classname;
					if(class1 == class2) {
						return method1 == method2;
					} else {
						return false;
					}
				} else {
					return false;
				}
				break;
			case 4:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 4) {
					let v1 = item1.v;
					let v2 = item2.v;
					return v1 == v2;
				} else {
					return false;
				}
				break;
			}
		}
	}
	static exceptionToString(e) {
		if(e.get_previous() == null) {
			let tmp = "Exception: " + e.get_message();
			let tmp1 = e.get_stack();
			return tmp + (tmp1 == null ? "null" : haxe_CallStack.toString(tmp1));
		}
		let result = "";
		let e1 = e;
		let prev = null;
		while(e1 != null) {
			if(prev == null) {
				let result1 = "Exception: " + e1.get_message();
				let tmp = e1.get_stack();
				result = result1 + (tmp == null ? "null" : haxe_CallStack.toString(tmp)) + result;
			} else {
				let prevStack = haxe_CallStack.subtract(e1.get_stack(),prev.get_stack());
				result = "Exception: " + e1.get_message() + (prevStack == null ? "null" : haxe_CallStack.toString(prevStack)) + "\n\nNext " + result;
			}
			prev = e1;
			e1 = e1.get_previous();
		}
		return result;
	}
	static itemToString(b,s) {
		switch(s._hx_index) {
		case 0:
			b.b += "a C function";
			break;
		case 1:
			let m = s.m;
			b.b += "module ";
			b.b += m == null ? "null" : "" + m;
			break;
		case 2:
			let col = s.column;
			let line = s.line;
			let file = s.file;
			let s1 = s.s;
			if(s1 != null) {
				haxe_CallStack.itemToString(b,s1);
				b.b += " (";
			}
			b.b += file == null ? "null" : "" + file;
			b.b += " line ";
			b.b += line == null ? "null" : "" + line;
			if(col != null) {
				b.b += " column ";
				b.b += col == null ? "null" : "" + col;
			}
			if(s1 != null) {
				b.b += ")";
			}
			break;
		case 3:
			let meth = s.method;
			let cname = s.classname;
			b.b += Std.string(cname == null ? "<unknown>" : cname);
			b.b += ".";
			b.b += meth == null ? "null" : "" + meth;
			break;
		case 4:
			let n = s.v;
			b.b += "local function #";
			b.b += n == null ? "null" : "" + n;
			break;
		}
	}
}
haxe_CallStack.__properties__ = {get_length: "get_length"};
class haxe_IMap {
}
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
Object.assign(haxe_IMap.prototype, {
	__class__: haxe_IMap
	,get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,keyValueIterator: null
	,copy: null
	,toString: null
	,clear: null
});
class haxe_DynamicAccess {
	static _new() {
		let this1 = { };
		return this1;
	}
	static get(this1,key) {
		return this1[key];
	}
	static set(this1,key,value) {
		return this1[key] = value;
	}
	static exists(this1,key) {
		return Object.prototype.hasOwnProperty.call(this1,key);
	}
	static remove(this1,key) {
		return Reflect.deleteField(this1,key);
	}
	static keys(this1) {
		return Reflect.fields(this1);
	}
	static copy(this1) {
		return Reflect.copy(this1);
	}
	static iterator(this1) {
		return new haxe_iterators_DynamicAccessIterator(this1);
	}
	static keyValueIterator(this1) {
		return new haxe_iterators_DynamicAccessKeyValueIterator(this1);
	}
}
class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
		this.__skipStack = 0;
		let old = Error.prepareStackTrace;
		Error.prepareStackTrace = function(e) { return e.stack; }
		if(((native) instanceof Error)) {
			this.stack = native.stack;
		} else {
			let e = null;
			if(Error.captureStackTrace) {
				Error.captureStackTrace(this,haxe_Exception);
				e = this;
			} else {
				e = new Error();
				if(typeof(e.stack) == "undefined") {
					try { throw e; } catch(_) {}
					this.__skipStack++;
				}
			}
			this.stack = e.stack;
		}
		Error.prepareStackTrace = old;
	}
	unwrap() {
		return this.__nativeException;
	}
	toString() {
		return this.get_message();
	}
	details() {
		if(this.get_previous() == null) {
			let tmp = "Exception: " + this.get_message();
			let tmp1 = this.get_stack();
			return tmp + (tmp1 == null ? "null" : haxe_CallStack.toString(tmp1));
		} else {
			let result = "";
			let e = this;
			let prev = null;
			while(e != null) {
				if(prev == null) {
					let result1 = "Exception: " + e.get_message();
					let tmp = e.get_stack();
					result = result1 + (tmp == null ? "null" : haxe_CallStack.toString(tmp)) + result;
				} else {
					let prevStack = haxe_CallStack.subtract(e.get_stack(),prev.get_stack());
					result = "Exception: " + e.get_message() + (prevStack == null ? "null" : haxe_CallStack.toString(prevStack)) + "\n\nNext " + result;
				}
				prev = e;
				e = e.get_previous();
			}
			return result;
		}
	}
	__shiftStack() {
		this.__skipStack++;
	}
	get_message() {
		return this.message;
	}
	get_previous() {
		return this.__previousException;
	}
	get_native() {
		return this.__nativeException;
	}
	get_stack() {
		let _g = this.__exceptionStack;
		if(_g == null) {
			let value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			let s = _g;
			return s;
		}
	}
	setProperty(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	get___exceptionStack() {
		return this.__exceptionStack;
	}
	set___exceptionStack(value) {
		this.setProperty("__exceptionStack",value);
		return value;
	}
	get___skipStack() {
		return this.__skipStack;
	}
	set___skipStack(value) {
		this.setProperty("__skipStack",value);
		return value;
	}
	get___nativeException() {
		return this.__nativeException;
	}
	set___nativeException(value) {
		this.setProperty("__nativeException",value);
		return value;
	}
	get___previousException() {
		return this.__previousException;
	}
	set___previousException(value) {
		this.setProperty("__previousException",value);
		return value;
	}
	static caught(value) {
		if(((value) instanceof haxe_Exception)) {
			return value;
		} else if(((value) instanceof Error)) {
			return new haxe_Exception(value.message,null,value);
		} else {
			return new haxe_ValueException(value,null,value);
		}
	}
	static thrown(value) {
		if(((value) instanceof haxe_Exception)) {
			return value.get_native();
		} else if(((value) instanceof Error)) {
			return value;
		} else {
			let e = new haxe_ValueException(value);
			e.__skipStack++;
			return e;
		}
	}
}
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.__super__ = Error;
Object.assign(haxe_Exception.prototype, {
	__class__: haxe_Exception
	,__skipStack: null
	,__nativeException: null
	,__previousException: null
	,__properties__: {set___exceptionStack: "set___exceptionStack",get___exceptionStack: "get___exceptionStack",get_native: "get_native",get_previous: "get_previous",get_stack: "get_stack",get_message: "get_message"}
});
class haxe_Int32 {
	static negate(this1) {
		return ~this1 + 1 | 0;
	}
	static preIncrement(this1) {
		this1 = ++this1 | 0;
		return this1;
	}
	static postIncrement(this1) {
		let ret = this1++;
		this1 |= 0;
		return ret;
	}
	static preDecrement(this1) {
		this1 = --this1 | 0;
		return this1;
	}
	static postDecrement(this1) {
		let ret = this1--;
		this1 |= 0;
		return ret;
	}
	static add(a,b) {
		return a + b | 0;
	}
	static addInt(a,b) {
		return a + b | 0;
	}
	static sub(a,b) {
		return a - b | 0;
	}
	static subInt(a,b) {
		return a - b | 0;
	}
	static intSub(a,b) {
		return a - b | 0;
	}
	static mul(a,b) {
		return haxe_Int32._mul(a,b);
	}
	static mulInt(a,b) {
		return haxe_Int32._mul(a,b);
	}
	static toFloat(this1) {
		return this1;
	}
	static ucompare(a,b) {
		if(a < 0) {
			if(b < 0) {
				return ~b - ~a | 0;
			} else {
				return 1;
			}
		}
		if(b < 0) {
			return -1;
		} else {
			return a - b | 0;
		}
	}
	static clamp(x) {
		return x | 0;
	}
}
class haxe_Int64 {
	static _new(x) {
		let this1 = x;
		return this1;
	}
	static copy(this1) {
		let this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
		return this2;
	}
	static make(high,low) {
		let this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static ofInt(x) {
		let this1 = new haxe__$Int64__$_$_$Int64(x >> 31,x);
		return this1;
	}
	static toInt(x) {
		if(x.high != x.low >> 31) {
			throw haxe_Exception.thrown("Overflow");
		}
		return x.low;
	}
	static is(val) {
		return ((val) instanceof haxe__$Int64__$_$_$Int64);
	}
	static isInt64(val) {
		return ((val) instanceof haxe__$Int64__$_$_$Int64);
	}
	static getHigh(x) {
		return x.high;
	}
	static getLow(x) {
		return x.low;
	}
	static isNeg(x) {
		return x.high < 0;
	}
	static isZero(x) {
		let b_high = 0;
		let b_low = 0;
		if(x.high == b_high) {
			return x.low == b_low;
		} else {
			return false;
		}
	}
	static compare(a,b) {
		let v = a.high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b.low);
		}
		if(a.high < 0) {
			if(b.high < 0) {
				return v;
			} else {
				return -1;
			}
		} else if(b.high >= 0) {
			return v;
		} else {
			return 1;
		}
	}
	static ucompare(a,b) {
		let v = haxe_Int32.ucompare(a.high,b.high);
		if(v != 0) {
			return v;
		} else {
			return haxe_Int32.ucompare(a.low,b.low);
		}
	}
	static toStr(x) {
		return haxe_Int64.toString(x);
	}
	static toString(this1) {
		let i = this1;
		let b_high = 0;
		let b_low = 0;
		if(i.high == b_high && i.low == b_low) {
			return "0";
		}
		let str = "";
		let neg = false;
		if(i.high < 0) {
			neg = true;
		}
		let this2 = new haxe__$Int64__$_$_$Int64(0,10);
		let ten = this2;
		while(true) {
			let b_high = 0;
			let b_low = 0;
			if(!(i.high != b_high || i.low != b_low)) {
				break;
			}
			let r = haxe_Int64.divMod(i,ten);
			if(r.modulus.high < 0) {
				let x = r.modulus;
				let high = ~x.high;
				let low = ~x.low + 1 | 0;
				if(low == 0) {
					let ret = high++;
					high = high | 0;
				}
				let this_high = high;
				let this_low = low;
				str = this_low + str;
				let x1 = r.quotient;
				let high1 = ~x1.high;
				let low1 = ~x1.low + 1 | 0;
				if(low1 == 0) {
					let ret = high1++;
					high1 = high1 | 0;
				}
				let this1 = new haxe__$Int64__$_$_$Int64(high1,low1);
				i = this1;
			} else {
				str = r.modulus.low + str;
				i = r.quotient;
			}
		}
		if(neg) {
			str = "-" + str;
		}
		return str;
	}
	static parseString(sParam) {
		return haxe_Int64Helper.parseString(sParam);
	}
	static fromFloat(f) {
		return haxe_Int64Helper.fromFloat(f);
	}
	static divMod(dividend,divisor) {
		if(divisor.high == 0) {
			switch(divisor.low) {
			case 0:
				throw haxe_Exception.thrown("divide by zero");
			case 1:
				let this1 = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
				let this2 = new haxe__$Int64__$_$_$Int64(0,0);
				return { quotient : this1, modulus : this2};
			}
		}
		let divSign = dividend.high < 0 != divisor.high < 0;
		let modulus;
		if(dividend.high < 0) {
			let high = ~dividend.high;
			let low = ~dividend.low + 1 | 0;
			if(low == 0) {
				let ret = high++;
				high = high | 0;
			}
			let this1 = new haxe__$Int64__$_$_$Int64(high,low);
			modulus = this1;
		} else {
			let this1 = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
			modulus = this1;
		}
		if(divisor.high < 0) {
			let high = ~divisor.high;
			let low = ~divisor.low + 1 | 0;
			if(low == 0) {
				let ret = high++;
				high = high | 0;
			}
			let this1 = new haxe__$Int64__$_$_$Int64(high,low);
			divisor = this1;
		}
		let this3 = new haxe__$Int64__$_$_$Int64(0,0);
		let quotient = this3;
		let this4 = new haxe__$Int64__$_$_$Int64(0,1);
		let mask = this4;
		while(!(divisor.high < 0)) {
			let v = haxe_Int32.ucompare(divisor.high,modulus.high);
			let cmp = v != 0 ? v : haxe_Int32.ucompare(divisor.low,modulus.low);
			let b = 1;
			b &= 63;
			if(b == 0) {
				let this1 = new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low);
				divisor = this1;
			} else if(b < 32) {
				let this1 = new haxe__$Int64__$_$_$Int64(divisor.high << b | divisor.low >>> 32 - b,divisor.low << b);
				divisor = this1;
			} else {
				let this1 = new haxe__$Int64__$_$_$Int64(divisor.low << b - 32,0);
				divisor = this1;
			}
			let b1 = 1;
			b1 &= 63;
			if(b1 == 0) {
				let this1 = new haxe__$Int64__$_$_$Int64(mask.high,mask.low);
				mask = this1;
			} else if(b1 < 32) {
				let this1 = new haxe__$Int64__$_$_$Int64(mask.high << b1 | mask.low >>> 32 - b1,mask.low << b1);
				mask = this1;
			} else {
				let this1 = new haxe__$Int64__$_$_$Int64(mask.low << b1 - 32,0);
				mask = this1;
			}
			if(cmp >= 0) {
				break;
			}
		}
		while(true) {
			let b_high = 0;
			let b_low = 0;
			if(!(mask.high != b_high || mask.low != b_low)) {
				break;
			}
			let v = haxe_Int32.ucompare(modulus.high,divisor.high);
			if((v != 0 ? v : haxe_Int32.ucompare(modulus.low,divisor.low)) >= 0) {
				let this1 = new haxe__$Int64__$_$_$Int64(quotient.high | mask.high,quotient.low | mask.low);
				quotient = this1;
				let high = modulus.high - divisor.high | 0;
				let low = modulus.low - divisor.low | 0;
				if(haxe_Int32.ucompare(modulus.low,divisor.low) < 0) {
					let ret = high--;
					high = high | 0;
				}
				let this2 = new haxe__$Int64__$_$_$Int64(high,low);
				modulus = this2;
			}
			let b = 1;
			b &= 63;
			if(b == 0) {
				let this1 = new haxe__$Int64__$_$_$Int64(mask.high,mask.low);
				mask = this1;
			} else if(b < 32) {
				let this1 = new haxe__$Int64__$_$_$Int64(mask.high >>> b,mask.high << 32 - b | mask.low >>> b);
				mask = this1;
			} else {
				let this1 = new haxe__$Int64__$_$_$Int64(0,mask.high >>> b - 32);
				mask = this1;
			}
			let b1 = 1;
			b1 &= 63;
			if(b1 == 0) {
				let this1 = new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low);
				divisor = this1;
			} else if(b1 < 32) {
				let this1 = new haxe__$Int64__$_$_$Int64(divisor.high >>> b1,divisor.high << 32 - b1 | divisor.low >>> b1);
				divisor = this1;
			} else {
				let this1 = new haxe__$Int64__$_$_$Int64(0,divisor.high >>> b1 - 32);
				divisor = this1;
			}
		}
		if(divSign) {
			let high = ~quotient.high;
			let low = ~quotient.low + 1 | 0;
			if(low == 0) {
				let ret = high++;
				high = high | 0;
			}
			let this1 = new haxe__$Int64__$_$_$Int64(high,low);
			quotient = this1;
		}
		if(dividend.high < 0) {
			let high = ~modulus.high;
			let low = ~modulus.low + 1 | 0;
			if(low == 0) {
				let ret = high++;
				high = high | 0;
			}
			let this1 = new haxe__$Int64__$_$_$Int64(high,low);
			modulus = this1;
		}
		return { quotient : quotient, modulus : modulus};
	}
	static neg(x) {
		let high = ~x.high;
		let low = ~x.low + 1 | 0;
		if(low == 0) {
			let ret = high++;
			high = high | 0;
		}
		let this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static preIncrement(this1) {
		let this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
		this1 = this2;
		let ret = this1.low++;
		this1.low = this1.low | 0;
		if(this1.low == 0) {
			let ret = this1.high++;
			this1.high = this1.high | 0;
		}
		return this1;
	}
	static postIncrement(this1) {
		let ret = this1;
		let this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
		this1 = this2;
		let ret1 = this1.low++;
		this1.low = this1.low | 0;
		if(this1.low == 0) {
			let ret = this1.high++;
			this1.high = this1.high | 0;
		}
		return ret;
	}
	static preDecrement(this1) {
		let this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
		this1 = this2;
		if(this1.low == 0) {
			let ret = this1.high--;
			this1.high = this1.high | 0;
		}
		let ret = this1.low--;
		this1.low = this1.low | 0;
		return this1;
	}
	static postDecrement(this1) {
		let ret = this1;
		let this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
		this1 = this2;
		if(this1.low == 0) {
			let ret = this1.high--;
			this1.high = this1.high | 0;
		}
		let ret1 = this1.low--;
		this1.low = this1.low | 0;
		return ret;
	}
	static add(a,b) {
		let high = a.high + b.high | 0;
		let low = a.low + b.low | 0;
		if(haxe_Int32.ucompare(low,a.low) < 0) {
			let ret = high++;
			high = high | 0;
		}
		let this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static addInt(a,b) {
		let b_high = b >> 31;
		let b_low = b;
		let high = a.high + b_high | 0;
		let low = a.low + b_low | 0;
		if(haxe_Int32.ucompare(low,a.low) < 0) {
			let ret = high++;
			high = high | 0;
		}
		let this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static sub(a,b) {
		let high = a.high - b.high | 0;
		let low = a.low - b.low | 0;
		if(haxe_Int32.ucompare(a.low,b.low) < 0) {
			let ret = high--;
			high = high | 0;
		}
		let this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static subInt(a,b) {
		let b_high = b >> 31;
		let b_low = b;
		let high = a.high - b_high | 0;
		let low = a.low - b_low | 0;
		if(haxe_Int32.ucompare(a.low,b_low) < 0) {
			let ret = high--;
			high = high | 0;
		}
		let this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static intSub(a,b) {
		let a_high = a >> 31;
		let a_low = a;
		let high = a_high - b.high | 0;
		let low = a_low - b.low | 0;
		if(haxe_Int32.ucompare(a_low,b.low) < 0) {
			let ret = high--;
			high = high | 0;
		}
		let this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static mul(a,b) {
		let mask = 65535;
		let al = a.low & mask;
		let ah = a.low >>> 16;
		let bl = b.low & mask;
		let bh = b.low >>> 16;
		let p00 = haxe_Int32._mul(al,bl);
		let p10 = haxe_Int32._mul(ah,bl);
		let p01 = haxe_Int32._mul(al,bh);
		let p11 = haxe_Int32._mul(ah,bh);
		let low = p00;
		let high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
		p01 <<= 16;
		low = low + p01 | 0;
		if(haxe_Int32.ucompare(low,p01) < 0) {
			let ret = high++;
			high = high | 0;
		}
		p10 <<= 16;
		low = low + p10 | 0;
		if(haxe_Int32.ucompare(low,p10) < 0) {
			let ret = high++;
			high = high | 0;
		}
		high = high + (haxe_Int32._mul(a.low,b.high) + haxe_Int32._mul(a.high,b.low) | 0) | 0;
		let this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static mulInt(a,b) {
		let b_high = b >> 31;
		let b_low = b;
		let mask = 65535;
		let al = a.low & mask;
		let ah = a.low >>> 16;
		let bl = b_low & mask;
		let bh = b_low >>> 16;
		let p00 = haxe_Int32._mul(al,bl);
		let p10 = haxe_Int32._mul(ah,bl);
		let p01 = haxe_Int32._mul(al,bh);
		let p11 = haxe_Int32._mul(ah,bh);
		let low = p00;
		let high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
		p01 <<= 16;
		low = low + p01 | 0;
		if(haxe_Int32.ucompare(low,p01) < 0) {
			let ret = high++;
			high = high | 0;
		}
		p10 <<= 16;
		low = low + p10 | 0;
		if(haxe_Int32.ucompare(low,p10) < 0) {
			let ret = high++;
			high = high | 0;
		}
		high = high + (haxe_Int32._mul(a.low,b_high) + haxe_Int32._mul(a.high,b_low) | 0) | 0;
		let this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	static div(a,b) {
		return haxe_Int64.divMod(a,b).quotient;
	}
	static divInt(a,b) {
		let this1 = new haxe__$Int64__$_$_$Int64(b >> 31,b);
		return haxe_Int64.divMod(a,this1).quotient;
	}
	static intDiv(a,b) {
		let this1 = new haxe__$Int64__$_$_$Int64(a >> 31,a);
		let x = haxe_Int64.divMod(this1,b).quotient;
		if(x.high != x.low >> 31) {
			throw haxe_Exception.thrown("Overflow");
		}
		let x1 = x.low;
		let this2 = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
		return this2;
	}
	static mod(a,b) {
		return haxe_Int64.divMod(a,b).modulus;
	}
	static modInt(a,b) {
		let this1 = new haxe__$Int64__$_$_$Int64(b >> 31,b);
		let x = haxe_Int64.divMod(a,this1).modulus;
		if(x.high != x.low >> 31) {
			throw haxe_Exception.thrown("Overflow");
		}
		let x1 = x.low;
		let this2 = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
		return this2;
	}
	static intMod(a,b) {
		let this1 = new haxe__$Int64__$_$_$Int64(a >> 31,a);
		let x = haxe_Int64.divMod(this1,b).modulus;
		if(x.high != x.low >> 31) {
			throw haxe_Exception.thrown("Overflow");
		}
		let x1 = x.low;
		let this2 = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
		return this2;
	}
	static eq(a,b) {
		if(a.high == b.high) {
			return a.low == b.low;
		} else {
			return false;
		}
	}
	static eqInt(a,b) {
		let b_high = b >> 31;
		let b_low = b;
		if(a.high == b_high) {
			return a.low == b_low;
		} else {
			return false;
		}
	}
	static neq(a,b) {
		if(a.high == b.high) {
			return a.low != b.low;
		} else {
			return true;
		}
	}
	static neqInt(a,b) {
		let b_high = b >> 31;
		let b_low = b;
		if(a.high == b_high) {
			return a.low != b_low;
		} else {
			return true;
		}
	}
	static lt(a,b) {
		let v = a.high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b.low);
		}
		return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) < 0;
	}
	static ltInt(a,b) {
		let b_high = b >> 31;
		let b_low = b;
		let v = a.high - b_high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b_low);
		}
		return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) < 0;
	}
	static intLt(a,b) {
		let a_high = a >> 31;
		let a_low = a;
		let v = a_high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a_low,b.low);
		}
		return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) < 0;
	}
	static lte(a,b) {
		let v = a.high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b.low);
		}
		return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) <= 0;
	}
	static lteInt(a,b) {
		let b_high = b >> 31;
		let b_low = b;
		let v = a.high - b_high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b_low);
		}
		return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) <= 0;
	}
	static intLte(a,b) {
		let a_high = a >> 31;
		let a_low = a;
		let v = a_high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a_low,b.low);
		}
		return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) <= 0;
	}
	static gt(a,b) {
		let v = a.high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b.low);
		}
		return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) > 0;
	}
	static gtInt(a,b) {
		let b_high = b >> 31;
		let b_low = b;
		let v = a.high - b_high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b_low);
		}
		return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) > 0;
	}
	static intGt(a,b) {
		let a_high = a >> 31;
		let a_low = a;
		let v = a_high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a_low,b.low);
		}
		return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) > 0;
	}
	static gte(a,b) {
		let v = a.high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b.low);
		}
		return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) >= 0;
	}
	static gteInt(a,b) {
		let b_high = b >> 31;
		let b_low = b;
		let v = a.high - b_high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b_low);
		}
		return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) >= 0;
	}
	static intGte(a,b) {
		let a_high = a >> 31;
		let a_low = a;
		let v = a_high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a_low,b.low);
		}
		return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) >= 0;
	}
	static complement(a) {
		let this1 = new haxe__$Int64__$_$_$Int64(~a.high,~a.low);
		return this1;
	}
	static and(a,b) {
		let this1 = new haxe__$Int64__$_$_$Int64(a.high & b.high,a.low & b.low);
		return this1;
	}
	static or(a,b) {
		let this1 = new haxe__$Int64__$_$_$Int64(a.high | b.high,a.low | b.low);
		return this1;
	}
	static xor(a,b) {
		let this1 = new haxe__$Int64__$_$_$Int64(a.high ^ b.high,a.low ^ b.low);
		return this1;
	}
	static shl(a,b) {
		b &= 63;
		if(b == 0) {
			let this1 = new haxe__$Int64__$_$_$Int64(a.high,a.low);
			return this1;
		} else if(b < 32) {
			let this1 = new haxe__$Int64__$_$_$Int64(a.high << b | a.low >>> 32 - b,a.low << b);
			return this1;
		} else {
			let this1 = new haxe__$Int64__$_$_$Int64(a.low << b - 32,0);
			return this1;
		}
	}
	static shr(a,b) {
		b &= 63;
		if(b == 0) {
			let this1 = new haxe__$Int64__$_$_$Int64(a.high,a.low);
			return this1;
		} else if(b < 32) {
			let this1 = new haxe__$Int64__$_$_$Int64(a.high >> b,a.high << 32 - b | a.low >>> b);
			return this1;
		} else {
			let this1 = new haxe__$Int64__$_$_$Int64(a.high >> 31,a.high >> b - 32);
			return this1;
		}
	}
	static ushr(a,b) {
		b &= 63;
		if(b == 0) {
			let this1 = new haxe__$Int64__$_$_$Int64(a.high,a.low);
			return this1;
		} else if(b < 32) {
			let this1 = new haxe__$Int64__$_$_$Int64(a.high >>> b,a.high << 32 - b | a.low >>> b);
			return this1;
		} else {
			let this1 = new haxe__$Int64__$_$_$Int64(0,a.high >>> b - 32);
			return this1;
		}
	}
	static get_high(this1) {
		return this1.high;
	}
	static set_high(this1,x) {
		return this1.high = x;
	}
	static get_low(this1) {
		return this1.low;
	}
	static set_low(this1,x) {
		return this1.low = x;
	}
}
haxe_Int64.__properties__ = {get_low: "get_low",get_high: "get_high"};
class haxe__$Int64__$_$_$Int64 {
	constructor(high,low) {
		this.high = high;
		this.low = low;
	}
	toString() {
		return haxe_Int64.toString(this);
	}
}
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
Object.assign(haxe__$Int64__$_$_$Int64.prototype, {
	__class__: haxe__$Int64__$_$_$Int64
	,high: null
	,low: null
});
class haxe_Int64Helper {
	static parseString(sParam) {
		let base_high = 0;
		let base_low = 10;
		let this1 = new haxe__$Int64__$_$_$Int64(0,0);
		let current = this1;
		let this2 = new haxe__$Int64__$_$_$Int64(0,1);
		let multiplier = this2;
		let sIsNegative = false;
		let s = StringTools.trim(sParam);
		if(s.charAt(0) == "-") {
			sIsNegative = true;
			s = s.substring(1,s.length);
		}
		let len = s.length;
		let _g = 0;
		let _g1 = len;
		while(_g < _g1) {
			let i = _g++;
			let digitInt = HxOverrides.cca(s,len - 1 - i) - 48;
			if(digitInt < 0 || digitInt > 9) {
				throw haxe_Exception.thrown("NumberFormatError");
			}
			if(digitInt != 0) {
				let digit_high = digitInt >> 31;
				let digit_low = digitInt;
				if(sIsNegative) {
					let mask = 65535;
					let al = multiplier.low & mask;
					let ah = multiplier.low >>> 16;
					let bl = digit_low & mask;
					let bh = digit_low >>> 16;
					let p00 = haxe_Int32._mul(al,bl);
					let p10 = haxe_Int32._mul(ah,bl);
					let p01 = haxe_Int32._mul(al,bh);
					let p11 = haxe_Int32._mul(ah,bh);
					let low = p00;
					let high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
					p01 <<= 16;
					low = low + p01 | 0;
					if(haxe_Int32.ucompare(low,p01) < 0) {
						let ret = high++;
						high = high | 0;
					}
					p10 <<= 16;
					low = low + p10 | 0;
					if(haxe_Int32.ucompare(low,p10) < 0) {
						let ret = high++;
						high = high | 0;
					}
					high = high + (haxe_Int32._mul(multiplier.low,digit_high) + haxe_Int32._mul(multiplier.high,digit_low) | 0) | 0;
					let b_high = high;
					let b_low = low;
					let high1 = current.high - b_high | 0;
					let low1 = current.low - b_low | 0;
					if(haxe_Int32.ucompare(current.low,b_low) < 0) {
						let ret = high1--;
						high1 = high1 | 0;
					}
					let this1 = new haxe__$Int64__$_$_$Int64(high1,low1);
					current = this1;
					if(!(current.high < 0)) {
						throw haxe_Exception.thrown("NumberFormatError: Underflow");
					}
				} else {
					let mask = 65535;
					let al = multiplier.low & mask;
					let ah = multiplier.low >>> 16;
					let bl = digit_low & mask;
					let bh = digit_low >>> 16;
					let p00 = haxe_Int32._mul(al,bl);
					let p10 = haxe_Int32._mul(ah,bl);
					let p01 = haxe_Int32._mul(al,bh);
					let p11 = haxe_Int32._mul(ah,bh);
					let low = p00;
					let high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
					p01 <<= 16;
					low = low + p01 | 0;
					if(haxe_Int32.ucompare(low,p01) < 0) {
						let ret = high++;
						high = high | 0;
					}
					p10 <<= 16;
					low = low + p10 | 0;
					if(haxe_Int32.ucompare(low,p10) < 0) {
						let ret = high++;
						high = high | 0;
					}
					high = high + (haxe_Int32._mul(multiplier.low,digit_high) + haxe_Int32._mul(multiplier.high,digit_low) | 0) | 0;
					let b_high = high;
					let b_low = low;
					let high1 = current.high + b_high | 0;
					let low1 = current.low + b_low | 0;
					if(haxe_Int32.ucompare(low1,current.low) < 0) {
						let ret = high1++;
						high1 = high1 | 0;
					}
					let this1 = new haxe__$Int64__$_$_$Int64(high1,low1);
					current = this1;
					if(current.high < 0) {
						throw haxe_Exception.thrown("NumberFormatError: Overflow");
					}
				}
			}
			let mask = 65535;
			let al = multiplier.low & mask;
			let ah = multiplier.low >>> 16;
			let bl = base_low & mask;
			let bh = base_low >>> 16;
			let p00 = haxe_Int32._mul(al,bl);
			let p10 = haxe_Int32._mul(ah,bl);
			let p01 = haxe_Int32._mul(al,bh);
			let p11 = haxe_Int32._mul(ah,bh);
			let low = p00;
			let high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
			p01 <<= 16;
			low = low + p01 | 0;
			if(haxe_Int32.ucompare(low,p01) < 0) {
				let ret = high++;
				high = high | 0;
			}
			p10 <<= 16;
			low = low + p10 | 0;
			if(haxe_Int32.ucompare(low,p10) < 0) {
				let ret = high++;
				high = high | 0;
			}
			high = high + (haxe_Int32._mul(multiplier.low,base_high) + haxe_Int32._mul(multiplier.high,base_low) | 0) | 0;
			let this1 = new haxe__$Int64__$_$_$Int64(high,low);
			multiplier = this1;
		}
		return current;
	}
	static fromFloat(f) {
		if(isNaN(f) || !isFinite(f)) {
			throw haxe_Exception.thrown("Number is NaN or Infinite");
		}
		let noFractions = f - f % 1;
		if(noFractions > 9007199254740991) {
			throw haxe_Exception.thrown("Conversion overflow");
		}
		if(noFractions < -9007199254740991) {
			throw haxe_Exception.thrown("Conversion underflow");
		}
		let this1 = new haxe__$Int64__$_$_$Int64(0,0);
		let result = this1;
		let neg = noFractions < 0;
		let rest = neg ? -noFractions : noFractions;
		let i = 0;
		while(rest >= 1) {
			let curr = rest % 2;
			rest /= 2;
			if(curr >= 1) {
				let a_high = 0;
				let a_low = 1;
				let b = i;
				b &= 63;
				let b1;
				if(b == 0) {
					let this1 = new haxe__$Int64__$_$_$Int64(a_high,a_low);
					b1 = this1;
				} else if(b < 32) {
					let this1 = new haxe__$Int64__$_$_$Int64(a_high << b | a_low >>> 32 - b,a_low << b);
					b1 = this1;
				} else {
					let this1 = new haxe__$Int64__$_$_$Int64(a_low << b - 32,0);
					b1 = this1;
				}
				let high = result.high + b1.high | 0;
				let low = result.low + b1.low | 0;
				if(haxe_Int32.ucompare(low,result.low) < 0) {
					let ret = high++;
					high = high | 0;
				}
				let this1 = new haxe__$Int64__$_$_$Int64(high,low);
				result = this1;
			}
			++i;
		}
		if(neg) {
			let high = ~result.high;
			let low = ~result.low + 1 | 0;
			if(low == 0) {
				let ret = high++;
				high = high | 0;
			}
			let this1 = new haxe__$Int64__$_$_$Int64(high,low);
			result = this1;
		}
		return result;
	}
}
$hxClasses["haxe.Int64Helper"] = haxe_Int64Helper;
haxe_Int64Helper.__name__ = "haxe.Int64Helper";
class haxe_Log {
	static formatOutput(v,infos) {
		let str = Std.string(v);
		if(infos == null) {
			return str;
		}
		let pstr = infos.fileName + ":" + infos.lineNumber;
		if(infos.customParams != null) {
			let _g = 0;
			let _g1 = infos.customParams;
			while(_g < _g1.length) {
				let v = _g1[_g];
				++_g;
				str += ", " + Std.string(v);
			}
		}
		return pstr + ": " + str;
	}
	static trace(v,infos) {
		let str = haxe_Log.formatOutput(v,infos);
		if(typeof(console) != "undefined" && console.log != null) {
			console.log(str);
		}
	}
}
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
class haxe_NativeStackTrace {
	static saveStack(e) {
		haxe_NativeStackTrace.lastError = e;
	}
	static callStack() {
		let e = new Error("");
		let stack = haxe_NativeStackTrace.tryHaxeStack(e);
		if(typeof(stack) == "undefined") {
			try {
				throw e;
			} catch( _g ) {
			}
			stack = e.stack;
		}
		return haxe_NativeStackTrace.normalize(stack,2);
	}
	static exceptionStack() {
		return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
	}
	static toHaxe(s,skip) {
		if(skip == null) {
			skip = 0;
		}
		if(s == null) {
			return [];
		} else if(typeof(s) == "string") {
			let stack = s.split("\n");
			if(stack[0] == "Error") {
				stack.shift();
			}
			let m = [];
			let _g = 0;
			let _g1 = stack.length;
			while(_g < _g1) {
				let i = _g++;
				if(skip > i) {
					continue;
				}
				let line = stack[i];
				let matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
				if(matched != null) {
					let path = matched[1].split(".");
					if(path[0] == "$hxClasses") {
						path.shift();
					}
					let meth = path.pop();
					let file = matched[2];
					let line = Std.parseInt(matched[3]);
					let column = Std.parseInt(matched[4]);
					m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line,column));
				} else {
					m.push(haxe_StackItem.Module(StringTools.trim(line)));
				}
			}
			return m;
		} else if(skip > 0 && Array.isArray(s)) {
			return s.slice(skip);
		} else {
			return s;
		}
	}
	static tryHaxeStack(e) {
		if(e == null) {
			return [];
		}
		let oldValue = Error.prepareStackTrace;
		Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
		let stack = e.stack;
		Error.prepareStackTrace = oldValue;
		return stack;
	}
	static prepareHxStackTrace(e,callsites) {
		let stack = [];
		let _g = 0;
		while(_g < callsites.length) {
			let site = callsites[_g];
			++_g;
			if(haxe_NativeStackTrace.wrapCallSite != null) {
				site = haxe_NativeStackTrace.wrapCallSite(site);
			}
			let method = null;
			let fullName = site.getFunctionName();
			if(fullName != null) {
				let idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					let className = fullName.substring(0,idx);
					let methodName = fullName.substring(idx + 1);
					method = haxe_StackItem.Method(className,methodName);
				} else {
					method = haxe_StackItem.Method(null,fullName);
				}
			}
			let fileName = site.getFileName();
			let fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
			if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
				fileName = fileName.substring(fileAddr + 6);
			}
			stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
		}
		return stack;
	}
	static normalize(stack,skipItems) {
		if(skipItems == null) {
			skipItems = 0;
		}
		if(Array.isArray(stack) && skipItems > 0) {
			return stack.slice(skipItems);
		} else if(typeof(stack) == "string") {
			switch(stack.substring(0,6)) {
			case "Error\n":case "Error:":
				++skipItems;
				break;
			default:
			}
			return haxe_NativeStackTrace.skipLines(stack,skipItems);
		} else {
			return stack;
		}
	}
	static skipLines(stack,skip,pos) {
		if(pos == null) {
			pos = 0;
		}
		if(skip > 0) {
			pos = stack.indexOf("\n",pos);
			if(pos < 0) {
				return "";
			} else {
				return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
			}
		} else {
			return stack.substring(pos);
		}
	}
}
haxe_NativeStackTrace.lastError = null;
haxe_NativeStackTrace.wrapCallSite = null;
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
class haxe_ValueException extends haxe_Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
		this.__skipStack++;
	}
	unwrap() {
		return this.value;
	}
}
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
Object.assign(haxe_ValueException.prototype, {
	__class__: haxe_ValueException
	,value: null
});
class haxe_io_Bytes {
	constructor(data) {
		this.length = data.byteLength;
		this.b = new Uint8Array(data);
		this.b.bufferValue = data;
		data.hxBytes = this;
		data.bytes = this.b;
	}
	get(pos) {
		return this.b[pos];
	}
	set(pos,v) {
		this.b[pos] = v;
	}
	blit(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	fill(pos,len,value) {
		let _g = 0;
		let _g1 = len;
		while(_g < _g1) {
			let i = _g++;
			this.b[pos++] = value;
		}
	}
	sub(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	compare(other) {
		let b1 = this.b;
		let b2 = other.b;
		let len = this.length < other.length ? this.length : other.length;
		let _g = 0;
		let _g1 = len;
		while(_g < _g1) {
			let i = _g++;
			if(b1[i] != b2[i]) {
				return b1[i] - b2[i];
			}
		}
		return this.length - other.length;
	}
	initData() {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
	}
	getDouble(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	getFloat(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	setDouble(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	setFloat(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	getUInt16(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	setUInt16(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	getInt32(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	setInt32(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	getInt64(pos) {
		let this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
		return this1;
	}
	setInt64(pos,v) {
		this.setInt32(pos,v.low);
		this.setInt32(pos + 4,v.high);
	}
	getString(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		let s = "";
		let b = this.b;
		let i = pos;
		let max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			let debug = pos > 0;
			while(i < max) {
				let c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					let code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					let c2 = b[i++];
					let code = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else {
					let c2 = b[i++];
					let c3 = b[i++];
					let u = (c & 15) << 18 | (c2 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				let c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	readString(pos,len) {
		return this.getString(pos,len);
	}
	toString() {
		return this.getString(0,this.length);
	}
	toHex() {
		let s_b = "";
		let chars = [];
		let str = "0123456789abcdef";
		let _g = 0;
		let _g1 = str.length;
		while(_g < _g1) {
			let i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		let _g2 = 0;
		let _g3 = this.length;
		while(_g2 < _g3) {
			let i = _g2++;
			let c = this.b[i];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	getData() {
		return this.b.bufferValue;
	}
	static alloc(length) {
		return new haxe_io_Bytes(new ArrayBuffer(length));
	}
	static ofString(s,encoding) {
		if(encoding == haxe_io_Encoding.RawNative) {
			let buf = new Uint8Array(s.length << 1);
			let _g = 0;
			let _g1 = s.length;
			while(_g < _g1) {
				let i = _g++;
				let c = s.charCodeAt(i);
				buf[i << 1] = c & 255;
				buf[i << 1 | 1] = c >> 8;
			}
			return new haxe_io_Bytes(buf.buffer);
		}
		let a = [];
		let i = 0;
		while(i < s.length) {
			let c = s.charCodeAt(i++);
			if(55296 <= c && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
			}
			if(c <= 127) {
				a.push(c);
			} else if(c <= 2047) {
				a.push(192 | c >> 6);
				a.push(128 | c & 63);
			} else if(c <= 65535) {
				a.push(224 | c >> 12);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			} else {
				a.push(240 | c >> 18);
				a.push(128 | c >> 12 & 63);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			}
		}
		return new haxe_io_Bytes(new Uint8Array(a).buffer);
	}
	static ofData(b) {
		let hb = b.hxBytes;
		if(hb != null) {
			return hb;
		}
		return new haxe_io_Bytes(b);
	}
	static ofHex(s) {
		if((s.length & 1) != 0) {
			throw haxe_Exception.thrown("Not a hex string (odd number of digits)");
		}
		let a = [];
		let i = 0;
		let len = s.length >> 1;
		while(i < len) {
			let high = s.charCodeAt(i * 2);
			let low = s.charCodeAt(i * 2 + 1);
			high = (high & 15) + ((high & 64) >> 6) * 9;
			low = (low & 15) + ((low & 64) >> 6) * 9;
			a.push((high << 4 | low) & 255);
			++i;
		}
		return new haxe_io_Bytes(new Uint8Array(a).buffer);
	}
	static fastGet(b,pos) {
		return b.bytes[pos];
	}
}
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
Object.assign(haxe_io_Bytes.prototype, {
	__class__: haxe_io_Bytes
	,length: null
	,b: null
	,data: null
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : "haxe.io.Encoding", __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__empty_constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
class haxe_crypto_Base64 {
	static encode(bytes,complement) {
		if(complement == null) {
			complement = true;
		}
		let str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
		if(complement) {
			switch(bytes.length % 3) {
			case 1:
				str += "==";
				break;
			case 2:
				str += "=";
				break;
			default:
			}
		}
		return str;
	}
	static decode(str,complement) {
		if(complement == null) {
			complement = true;
		}
		if(complement) {
			while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
		}
		return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
	}
	static urlEncode(bytes,complement) {
		if(complement == null) {
			complement = false;
		}
		let str = new haxe_crypto_BaseCode(haxe_crypto_Base64.URL_BYTES).encodeBytes(bytes).toString();
		if(complement) {
			switch(bytes.length % 3) {
			case 1:
				str += "==";
				break;
			case 2:
				str += "=";
				break;
			default:
			}
		}
		return str;
	}
	static urlDecode(str,complement) {
		if(complement == null) {
			complement = false;
		}
		if(complement) {
			while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
		}
		return new haxe_crypto_BaseCode(haxe_crypto_Base64.URL_BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
	}
}
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
class haxe_crypto_BaseCode {
	constructor(base) {
		let len = base.length;
		let nbits = 1;
		while(len > 1 << nbits) ++nbits;
		if(nbits > 8 || len != 1 << nbits) {
			throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
		}
		this.base = base;
		this.nbits = nbits;
	}
	encodeBytes(b) {
		let nbits = this.nbits;
		let base = this.base;
		let size = b.length * 8 / nbits | 0;
		let out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		let buf = 0;
		let curbits = 0;
		let mask = (1 << nbits) - 1;
		let pin = 0;
		let pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	initTable() {
		let tbl = [];
		let _g = 0;
		while(_g < 256) {
			let i = _g++;
			tbl[i] = -1;
		}
		let _g1 = 0;
		let _g2 = this.base.length;
		while(_g1 < _g2) {
			let i = _g1++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	decodeBytes(b) {
		let nbits = this.nbits;
		let base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		let tbl = this.tbl;
		let size = b.length * nbits >> 3;
		let out = new haxe_io_Bytes(new ArrayBuffer(size));
		let buf = 0;
		let curbits = 0;
		let pin = 0;
		let pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				let i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	encodeString(s) {
		return this.encodeBytes(haxe_io_Bytes.ofString(s)).toString();
	}
	decodeString(s) {
		return this.decodeBytes(haxe_io_Bytes.ofString(s)).toString();
	}
	static encode(s,base) {
		let b = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(base));
		return b.encodeString(s);
	}
	static decode(s,base) {
		let b = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(base));
		return b.decodeString(s);
	}
}
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
Object.assign(haxe_crypto_BaseCode.prototype, {
	__class__: haxe_crypto_BaseCode
	,base: null
	,nbits: null
	,tbl: null
});
class haxe_ds_ArraySort {
	static sort(a,cmp) {
		haxe_ds_ArraySort.rec(a,cmp,0,a.length);
	}
	static rec(a,cmp,from,to) {
		let middle = from + to >> 1;
		if(to - from < 12) {
			if(to <= from) {
				return;
			}
			let _g = from + 1;
			let _g1 = to;
			while(_g < _g1) {
				let i = _g++;
				let j = i;
				while(j > from) {
					if(cmp(a[j],a[j - 1]) < 0) {
						haxe_ds_ArraySort.swap(a,j - 1,j);
					} else {
						break;
					}
					--j;
				}
			}
			return;
		}
		haxe_ds_ArraySort.rec(a,cmp,from,middle);
		haxe_ds_ArraySort.rec(a,cmp,middle,to);
		haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
	}
	static doMerge(a,cmp,from,pivot,to,len1,len2) {
		let first_cut;
		let second_cut;
		let len11;
		let len22;
		if(len1 == 0 || len2 == 0) {
			return;
		}
		if(len1 + len2 == 2) {
			if(cmp(a[pivot],a[from]) < 0) {
				haxe_ds_ArraySort.swap(a,pivot,from);
			}
			return;
		}
		if(len1 > len2) {
			len11 = len1 >> 1;
			first_cut = from + len11;
			second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
			len22 = second_cut - pivot;
		} else {
			len22 = len2 >> 1;
			second_cut = pivot + len22;
			first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
			len11 = first_cut - from;
		}
		haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
		let new_mid = first_cut + len22;
		haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
		haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
	}
	static rotate(a,cmp,from,mid,to) {
		if(from == mid || mid == to) {
			return;
		}
		let n = haxe_ds_ArraySort.gcd(to - from,mid - from);
		while(n-- != 0) {
			let val = a[from + n];
			let shift = mid - from;
			let p1 = from + n;
			let p2 = from + n + shift;
			while(p2 != from + n) {
				a[p1] = a[p2];
				p1 = p2;
				if(to - p2 > shift) {
					p2 += shift;
				} else {
					p2 = from + (shift - (to - p2));
				}
			}
			a[p1] = val;
		}
	}
	static gcd(m,n) {
		while(n != 0) {
			let t = m % n;
			m = n;
			n = t;
		}
		return m;
	}
	static upper(a,cmp,from,to,val) {
		let len = to - from;
		let half;
		let mid;
		while(len > 0) {
			half = len >> 1;
			mid = from + half;
			if(cmp(a[val],a[mid]) < 0) {
				len = half;
			} else {
				from = mid + 1;
				len = len - half - 1;
			}
		}
		return from;
	}
	static lower(a,cmp,from,to,val) {
		let len = to - from;
		let half;
		let mid;
		while(len > 0) {
			half = len >> 1;
			mid = from + half;
			if(cmp(a[mid],a[val]) < 0) {
				from = mid + 1;
				len = len - half - 1;
			} else {
				len = half;
			}
		}
		return from;
	}
	static swap(a,i,j) {
		let tmp = a[i];
		a[i] = a[j];
		a[j] = tmp;
	}
	static compare(a,cmp,i,j) {
		return cmp(a[i],a[j]);
	}
}
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
class haxe_ds_BalancedTree {
	constructor() {
	}
	set(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	get(key) {
		let node = this.root;
		while(node != null) {
			let c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	remove(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				return false;
			} else {
				throw _g;
			}
		}
	}
	exists(key) {
		let node = this.root;
		while(node != null) {
			let c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	iterator() {
		let ret = [];
		haxe_ds_BalancedTree.iteratorLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	keyValueIterator() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	keys() {
		let ret = [];
		this.keysLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	copy() {
		let copied = new haxe_ds_BalancedTree();
		copied.root = this.root;
		return copied;
	}
	setLoop(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		let c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			let nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			let nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	removeLoop(k,node) {
		if(node == null) {
			throw haxe_Exception.thrown("Not_found");
		}
		let c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	keysLoop(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	merge(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		let t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	minBinding(t) {
		if(t == null) {
			throw haxe_Exception.thrown("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	removeMinBinding(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	balance(l,k,v,r) {
		let hl = l == null ? 0 : l._height;
		let hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			let _this = l.left;
			let _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			let _this = r.right;
			let _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	compare(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	toString() {
		if(this.root == null) {
			return "{}";
		} else {
			return "{" + this.root.toString() + "}";
		}
	}
	clear() {
		this.root = null;
	}
	static iteratorLoop(node,acc) {
		if(node != null) {
			haxe_ds_BalancedTree.iteratorLoop(node.left,acc);
			acc.push(node.value);
			haxe_ds_BalancedTree.iteratorLoop(node.right,acc);
		}
	}
}
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_BalancedTree.prototype, {
	__class__: haxe_ds_BalancedTree
	,root: null
});
class haxe_ds_TreeNode {
	constructor(l,k,v,r,h) {
		if(h == null) {
			h = -1;
		}
		this.left = l;
		this.key = k;
		this.value = v;
		this.right = r;
		if(h == -1) {
			let tmp;
			let _this = this.left;
			let _this1 = this.right;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				let _this = this.left;
				tmp = _this == null ? 0 : _this._height;
			} else {
				let _this = this.right;
				tmp = _this == null ? 0 : _this._height;
			}
			this._height = tmp + 1;
		} else {
			this._height = h;
		}
	}
	toString() {
		return (this.left == null ? "" : this.left.toString() + ", ") + ("" + Std.string(this.key) + "=" + Std.string(this.value)) + (this.right == null ? "" : ", " + this.right.toString());
	}
}
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
Object.assign(haxe_ds_TreeNode.prototype, {
	__class__: haxe_ds_TreeNode
	,left: null
	,right: null
	,key: null
	,value: null
	,_height: null
});
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__ : "haxe.ds.Either", __constructs__ : ["Left","Right"]
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
};
haxe_ds_Either.__empty_constructs__ = [];
class haxe_ds_EnumValueMap extends haxe_ds_BalancedTree {
	constructor() {
		super();
	}
	compare(k1,k2) {
		let d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		let p1 = Type.enumParameters(k1);
		let p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	compareArgs(a1,a2) {
		let ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		let _g = 0;
		let _g1 = a1.length;
		while(_g < _g1) {
			let i = _g++;
			let d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	compareArg(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	copy() {
		let copied = new haxe_ds_EnumValueMap();
		copied.root = this.root;
		return copied;
	}
}
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
Object.assign(haxe_ds_EnumValueMap.prototype, {
	__class__: haxe_ds_EnumValueMap
});
class haxe_ds_GenericCell {
	constructor(elt,next) {
		this.elt = elt;
		this.next = next;
	}
}
$hxClasses["haxe.ds.GenericCell"] = haxe_ds_GenericCell;
haxe_ds_GenericCell.__name__ = "haxe.ds.GenericCell";
Object.assign(haxe_ds_GenericCell.prototype, {
	__class__: haxe_ds_GenericCell
	,elt: null
	,next: null
});
class haxe_ds_GenericStack {
	constructor() {
	}
	add(item) {
		this.head = new haxe_ds_GenericCell(item,this.head);
	}
	first() {
		if(this.head == null) {
			return null;
		} else {
			return this.head.elt;
		}
	}
	pop() {
		let k = this.head;
		if(k == null) {
			return null;
		} else {
			this.head = k.next;
			return k.elt;
		}
	}
	isEmpty() {
		return this.head == null;
	}
	remove(v) {
		let prev = null;
		let l = this.head;
		while(l != null) {
			if(l.elt == v) {
				if(prev == null) {
					this.head = l.next;
				} else {
					prev.next = l.next;
				}
				break;
			}
			prev = l;
			l = l.next;
		}
		return l != null;
	}
	iterator() {
		let l = this.head;
		return { hasNext : function() {
			return l != null;
		}, next : function() {
			let k = l;
			l = k.next;
			return k.elt;
		}};
	}
	toString() {
		let a = [];
		let l = this.head;
		while(l != null) {
			a.push(l.elt);
			l = l.next;
		}
		return "{" + a.join(",") + "}";
	}
}
$hxClasses["haxe.ds.GenericStack"] = haxe_ds_GenericStack;
haxe_ds_GenericStack.__name__ = "haxe.ds.GenericStack";
Object.assign(haxe_ds_GenericStack.prototype, {
	__class__: haxe_ds_GenericStack
	,head: null
});
class haxe_ds_HashMap {
	static _new() {
		let this1 = new haxe_ds__$HashMap_HashMapData();
		return this1;
	}
	static set(this1,k,v) {
		let _this = this1.keys;
		let key = k.hashCode();
		_this.h[key] = k;
		let _this1 = this1.values;
		let key1 = k.hashCode();
		_this1.h[key1] = v;
	}
	static get(this1,k) {
		let _this = this1.values;
		let key = k.hashCode();
		return _this.h[key];
	}
	static exists(this1,k) {
		let _this = this1.values;
		let key = k.hashCode();
		return _this.h.hasOwnProperty(key);
	}
	static remove(this1,k) {
		this1.values.remove(k.hashCode());
		return this1.keys.remove(k.hashCode());
	}
	static keys(this1) {
		return this1.keys.iterator();
	}
	static copy(this1) {
		let copied = new haxe_ds__$HashMap_HashMapData();
		copied.keys = this1.keys.copy();
		copied.values = this1.values.copy();
		return copied;
	}
	static iterator(this1) {
		return this1.values.iterator();
	}
	static keyValueIterator(this1) {
		return new haxe_iterators_HashMapKeyValueIterator(this1);
	}
	static clear(this1) {
		this1.keys.h = { };
		this1.values.h = { };
	}
}
class haxe_ds__$HashMap_HashMapData {
	constructor() {
		this.keys = new haxe_ds_IntMap();
		this.values = new haxe_ds_IntMap();
	}
}
$hxClasses["haxe.ds._HashMap.HashMapData"] = haxe_ds__$HashMap_HashMapData;
haxe_ds__$HashMap_HashMapData.__name__ = "haxe.ds._HashMap.HashMapData";
Object.assign(haxe_ds__$HashMap_HashMapData.prototype, {
	__class__: haxe_ds__$HashMap_HashMapData
	,keys: null
	,values: null
});
class haxe_ds_IntMap {
	constructor() {
		this.h = { };
	}
	set(key,value) {
		this.h[key] = value;
	}
	get(key) {
		return this.h[key];
	}
	exists(key) {
		return this.h.hasOwnProperty(key);
	}
	remove(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	keys() {
		let a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	iterator() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			let i = this.it.next();
			return this.ref[i];
		}};
	}
	keyValueIterator() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	copy() {
		let copied = new haxe_ds_IntMap();
		let key = this.keys();
		while(key.hasNext()) {
			let key1 = key.next();
			copied.h[key1] = this.h[key1];
		}
		return copied;
	}
	toString() {
		let s_b = "";
		s_b += "{";
		let it = this.keys();
		let i = it;
		while(i.hasNext()) {
			let i1 = i.next();
			s_b += i1 == null ? "null" : "" + i1;
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	clear() {
		this.h = { };
	}
}
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_IntMap.prototype, {
	__class__: haxe_ds_IntMap
	,h: null
});
class haxe_ds_List {
	constructor() {
		this.length = 0;
	}
	add(item) {
		let x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	push(item) {
		let x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	first() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	last() {
		if(this.q == null) {
			return null;
		} else {
			return this.q.item;
		}
	}
	pop() {
		if(this.h == null) {
			return null;
		}
		let x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	isEmpty() {
		return this.h == null;
	}
	clear() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	remove(v) {
		let prev = null;
		let l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	iterator() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	keyValueIterator() {
		return new haxe_ds__$List_ListKeyValueIterator(this.h);
	}
	toString() {
		let s_b = "";
		let first = true;
		let l = this.h;
		s_b += "{";
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += ", ";
			}
			s_b += Std.string(Std.string(l.item));
			l = l.next;
		}
		s_b += "}";
		return s_b;
	}
	join(sep) {
		let s_b = "";
		let first = true;
		let l = this.h;
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += sep == null ? "null" : "" + sep;
			}
			s_b += Std.string(l.item);
			l = l.next;
		}
		return s_b;
	}
	filter(f) {
		let l2 = new haxe_ds_List();
		let l = this.h;
		while(l != null) {
			let v = l.item;
			l = l.next;
			if(f(v)) {
				l2.add(v);
			}
		}
		return l2;
	}
	map(f) {
		let b = new haxe_ds_List();
		let l = this.h;
		while(l != null) {
			let v = l.item;
			l = l.next;
			b.add(f(v));
		}
		return b;
	}
}
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
Object.assign(haxe_ds_List.prototype, {
	__class__: haxe_ds_List
	,h: null
	,q: null
	,length: null
});
class haxe_ds__$List_ListNode {
	constructor(item,next) {
		this.item = item;
		this.next = next;
	}
}
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
Object.assign(haxe_ds__$List_ListNode.prototype, {
	__class__: haxe_ds__$List_ListNode
	,item: null
	,next: null
});
class haxe_ds__$List_ListIterator {
	constructor(head) {
		this.head = head;
	}
	hasNext() {
		return this.head != null;
	}
	next() {
		let val = this.head.item;
		this.head = this.head.next;
		return val;
	}
}
$hxClasses["haxe.ds._List.ListIterator"] = haxe_ds__$List_ListIterator;
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
Object.assign(haxe_ds__$List_ListIterator.prototype, {
	__class__: haxe_ds__$List_ListIterator
	,head: null
});
class haxe_ds__$List_ListKeyValueIterator {
	constructor(head) {
		this.head = head;
		this.idx = 0;
	}
	hasNext() {
		return this.head != null;
	}
	next() {
		let val = this.head.item;
		this.head = this.head.next;
		return { value : val, key : this.idx++};
	}
}
$hxClasses["haxe.ds._List.ListKeyValueIterator"] = haxe_ds__$List_ListKeyValueIterator;
haxe_ds__$List_ListKeyValueIterator.__name__ = "haxe.ds._List.ListKeyValueIterator";
Object.assign(haxe_ds__$List_ListKeyValueIterator.prototype, {
	__class__: haxe_ds__$List_ListKeyValueIterator
	,idx: null
	,head: null
});
class haxe_ds_ListSort {
	static sort(list,cmp) {
		if(list == null) {
			return null;
		}
		let insize = 1;
		let nmerges;
		let psize = 0;
		let qsize = 0;
		let p;
		let q;
		let e;
		let tail = null;
		while(true) {
			p = list;
			list = null;
			tail = null;
			nmerges = 0;
			while(p != null) {
				++nmerges;
				q = p;
				psize = 0;
				let _g = 0;
				let _g1 = insize;
				while(_g < _g1) {
					let i = _g++;
					++psize;
					q = q.next;
					if(q == null) {
						break;
					}
				}
				qsize = insize;
				while(psize > 0 || qsize > 0 && q != null) {
					if(psize == 0) {
						e = q;
						q = q.next;
						--qsize;
					} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
						e = p;
						p = p.next;
						--psize;
					} else {
						e = q;
						q = q.next;
						--qsize;
					}
					if(tail != null) {
						tail.next = e;
					} else {
						list = e;
					}
					e.prev = tail;
					tail = e;
				}
				p = q;
			}
			tail.next = null;
			if(nmerges <= 1) {
				break;
			}
			insize *= 2;
		}
		list.prev = tail;
		return list;
	}
	static sortSingleLinked(list,cmp) {
		if(list == null) {
			return null;
		}
		let insize = 1;
		let nmerges;
		let psize = 0;
		let qsize = 0;
		let p;
		let q;
		let e;
		let tail;
		while(true) {
			p = list;
			list = null;
			tail = null;
			nmerges = 0;
			while(p != null) {
				++nmerges;
				q = p;
				psize = 0;
				let _g = 0;
				let _g1 = insize;
				while(_g < _g1) {
					let i = _g++;
					++psize;
					q = q.next;
					if(q == null) {
						break;
					}
				}
				qsize = insize;
				while(psize > 0 || qsize > 0 && q != null) {
					if(psize == 0) {
						e = q;
						q = q.next;
						--qsize;
					} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
						e = p;
						p = p.next;
						--psize;
					} else {
						e = q;
						q = q.next;
						--qsize;
					}
					if(tail != null) {
						tail.next = e;
					} else {
						list = e;
					}
					tail = e;
				}
				p = q;
			}
			tail.next = null;
			if(nmerges <= 1) {
				break;
			}
			insize *= 2;
		}
		return list;
	}
}
$hxClasses["haxe.ds.ListSort"] = haxe_ds_ListSort;
haxe_ds_ListSort.__name__ = "haxe.ds.ListSort";
class haxe_ds_Map {
	static set(this1,key,value) {
		this1.set(key,value);
	}
	static get(this1,key) {
		return this1.get(key);
	}
	static exists(this1,key) {
		return this1.exists(key);
	}
	static remove(this1,key) {
		return this1.remove(key);
	}
	static keys(this1) {
		return this1.keys();
	}
	static iterator(this1) {
		return this1.iterator();
	}
	static keyValueIterator(this1) {
		return this1.keyValueIterator();
	}
	static copy(this1) {
		return this1.copy();
	}
	static toString(this1) {
		return this1.toString();
	}
	static clear(this1) {
		this1.clear();
	}
	static arrayWrite(this1,k,v) {
		this1.set(k,v);
		return v;
	}
	static toStringMap(t) {
		return new haxe_ds_StringMap();
	}
	static toIntMap(t) {
		return new haxe_ds_IntMap();
	}
	static toEnumValueMapMap(t) {
		return new haxe_ds_EnumValueMap();
	}
	static toObjectMap(t) {
		return new haxe_ds_ObjectMap();
	}
	static fromStringMap(map) {
		return map;
	}
	static fromIntMap(map) {
		return map;
	}
	static fromObjectMap(map) {
		return map;
	}
}
class haxe_ds_ObjectMap {
	constructor() {
		this.h = { __keys__ : { }};
	}
	set(key,value) {
		let id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	get(key) {
		return this.h[key.__id__];
	}
	exists(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	remove(key) {
		let id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	keys() {
		let a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	iterator() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			let i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	keyValueIterator() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	copy() {
		let copied = new haxe_ds_ObjectMap();
		let key = this.keys();
		while(key.hasNext()) {
			let key1 = key.next();
			copied.set(key1,this.h[key1.__id__]);
		}
		return copied;
	}
	toString() {
		let s_b = "";
		s_b += "{";
		let it = this.keys();
		let i = it;
		while(i.hasNext()) {
			let i1 = i.next();
			s_b += Std.string(Std.string(i1));
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1.__id__]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	clear() {
		this.h = { __keys__ : { }};
	}
	static assignId(obj) {
		return (obj.__id__ = $global.$haxeUID++);
	}
	static getId(obj) {
		return obj.__id__;
	}
}
haxe_ds_ObjectMap.count = null;
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_ObjectMap.prototype, {
	__class__: haxe_ds_ObjectMap
	,h: null
});
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : "haxe.ds.Option", __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
haxe_ds_Option.__empty_constructs__ = [haxe_ds_Option.None];
class haxe_ds_ReadOnlyArray {
	static get_length(this1) {
		return this1.length;
	}
	static get(this1,i) {
		return this1[i];
	}
}
haxe_ds_ReadOnlyArray.__properties__ = {get_length: "get_length"};
class haxe_ds_StringMap {
	constructor() {
		this.h = Object.create(null);
	}
	exists(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	get(key) {
		return this.h[key];
	}
	set(key,value) {
		this.h[key] = value;
	}
	remove(key) {
		if(Object.prototype.hasOwnProperty.call(this.h,key)) {
			delete(this.h[key]);
			return true;
		} else {
			return false;
		}
	}
	keys() {
		return haxe_ds_StringMap.keysIterator(this.h);
	}
	iterator() {
		return haxe_ds_StringMap.valueIterator(this.h);
	}
	keyValueIterator() {
		return haxe_ds_StringMap.kvIterator(this.h);
	}
	copy() {
		return haxe_ds_StringMap.createCopy(this.h);
	}
	clear() {
		this.h = Object.create(null);
	}
	toString() {
		return haxe_ds_StringMap.stringify(this.h);
	}
	static keysIterator(h) {
		let keys = Object.keys(h);
		let len = keys.length;
		let idx = 0;
		return { hasNext : function() {
			return idx < len;
		}, next : function() {
			idx += 1;
			return keys[idx - 1];
		}};
	}
	static valueIterator(h) {
		let keys = Object.keys(h);
		let len = keys.length;
		let idx = 0;
		return { hasNext : function() {
			return idx < len;
		}, next : function() {
			idx += 1;
			return h[keys[idx - 1]];
		}};
	}
	static kvIterator(h) {
		let keys = Object.keys(h);
		let len = keys.length;
		let idx = 0;
		return { hasNext : function() {
			return idx < len;
		}, next : function() {
			idx += 1;
			let k = keys[idx - 1];
			return { key : k, value : h[k]};
		}};
	}
	static createCopy(h) {
		let copy = new haxe_ds_StringMap();
		for (var key in h) copy.h[key] = h[key];
		return copy;
	}
	static stringify(h) {
		let s = "{";
		let first = true;
		for (var key in h) {
			if (first) first = false; else s += ',';
			s += key + ' => ' + Std.string(h[key]);
		}
		return s + "}";
	}
}
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_StringMap.prototype, {
	__class__: haxe_ds_StringMap
	,h: null
});
class haxe_ds_Vector {
	static _new(length) {
		let this1 = new Array(length);
		return this1;
	}
	static get(this1,index) {
		return this1[index];
	}
	static set(this1,index,val) {
		return this1[index] = val;
	}
	static get_length(this1) {
		return this1.length;
	}
	static blit(src,srcPos,dest,destPos,len) {
		if(src == dest) {
			if(srcPos < destPos) {
				let i = srcPos + len;
				let j = destPos + len;
				let _g = 0;
				let _g1 = len;
				while(_g < _g1) {
					let k = _g++;
					--i;
					--j;
					src[j] = src[i];
				}
			} else if(srcPos > destPos) {
				let i = srcPos;
				let j = destPos;
				let _g = 0;
				let _g1 = len;
				while(_g < _g1) {
					let k = _g++;
					src[j] = src[i];
					++i;
					++j;
				}
			}
		} else {
			let _g = 0;
			let _g1 = len;
			while(_g < _g1) {
				let i = _g++;
				dest[destPos + i] = src[srcPos + i];
			}
		}
	}
	static toArray(this1) {
		return this1.slice(0);
	}
	static toData(this1) {
		return this1;
	}
	static fromData(data) {
		return data;
	}
	static fromArrayCopy(array) {
		return array.slice(0);
	}
	static copy(this1) {
		let this2 = new Array(this1.length);
		let r = this2;
		haxe_ds_Vector.blit(this1,0,r,0,this1.length);
		return r;
	}
	static join(this1,sep) {
		let b_b = "";
		let len = this1.length;
		let _g = 0;
		let _g1 = len;
		while(_g < _g1) {
			let i = _g++;
			b_b += Std.string(Std.string(this1[i]));
			if(i < len - 1) {
				b_b += sep == null ? "null" : "" + sep;
			}
		}
		return b_b;
	}
	static map(this1,f) {
		let length = this1.length;
		let this2 = new Array(length);
		let r = this2;
		let len = length;
		let _g = 0;
		let _g1 = len;
		while(_g < _g1) {
			let i = _g++;
			let v = f(this1[i]);
			r[i] = v;
		}
		return r;
	}
	static sort(this1,f) {
		this1.sort(f);
	}
}
haxe_ds_Vector.__properties__ = {get_length: "get_length"};
class haxe_ds_WeakMap {
	constructor() {
		throw haxe_Exception.thrown("Not implemented for this platform");
	}
	set(key,value) {
	}
	get(key) {
		return null;
	}
	exists(key) {
		return false;
	}
	remove(key) {
		return false;
	}
	keys() {
		return null;
	}
	iterator() {
		return null;
	}
	keyValueIterator() {
		return null;
	}
	copy() {
		return null;
	}
	toString() {
		return null;
	}
	clear() {
	}
}
$hxClasses["haxe.ds.WeakMap"] = haxe_ds_WeakMap;
haxe_ds_WeakMap.__name__ = "haxe.ds.WeakMap";
haxe_ds_WeakMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_WeakMap.prototype, {
	__class__: haxe_ds_WeakMap
});
class haxe_http_HttpBase {
	constructor(url) {
		if(haxe_http_HttpBase._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(url);
	}
	_hx_constructor(url) {
		this.url = url;
		this.headers = [];
		this.params = [];
		this.emptyOnData = $bind(this,this.onData);
	}
	setHeader(name,value) {
		let _g = 0;
		let _g1 = this.headers.length;
		while(_g < _g1) {
			let i = _g++;
			if(this.headers[i].name == name) {
				this.headers[i] = { name : name, value : value};
				return;
			}
		}
		this.headers.push({ name : name, value : value});
	}
	addHeader(header,value) {
		this.headers.push({ name : header, value : value});
	}
	setParameter(name,value) {
		let _g = 0;
		let _g1 = this.params.length;
		while(_g < _g1) {
			let i = _g++;
			if(this.params[i].name == name) {
				this.params[i] = { name : name, value : value};
				return;
			}
		}
		this.params.push({ name : name, value : value});
	}
	addParameter(name,value) {
		this.params.push({ name : name, value : value});
	}
	setPostData(data) {
		this.postData = data;
		this.postBytes = null;
	}
	setPostBytes(data) {
		this.postBytes = data;
		this.postData = null;
	}
	request(post) {
		throw haxe_Exception.thrown("not implemented");
	}
	onData(data) {
	}
	onBytes(data) {
	}
	onError(msg) {
	}
	onStatus(status) {
	}
	hasOnData() {
		return !Reflect.compareMethods($bind(this,this.onData),this.emptyOnData);
	}
	success(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	get_responseData() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
}
$hxClasses["haxe.http.HttpBase"] = haxe_http_HttpBase;
haxe_http_HttpBase.__name__ = "haxe.http.HttpBase";
Object.assign(haxe_http_HttpBase.prototype, {
	__class__: haxe_http_HttpBase
	,url: null
	,responseBytes: null
	,responseAsString: null
	,postData: null
	,postBytes: null
	,headers: null
	,params: null
	,emptyOnData: null
	,__properties__: {get_responseData: "get_responseData"}
});
class haxe_http_HttpJs extends haxe_http_HttpBase {
	constructor(url) {
		haxe_http_HttpBase._hx_skip_constructor = true;
		super();
		haxe_http_HttpBase._hx_skip_constructor = false;
		this._hx_constructor(url);
	}
	_hx_constructor(url) {
		this.async = true;
		this.withCredentials = false;
		super._hx_constructor(url);
	}
	cancel() {
		if(this.req == null) {
			return;
		}
		this.req.abort();
		this.req = null;
	}
	request(post) {
		this.responseAsString = null;
		this.responseBytes = null;
		let r = this.req = js_Browser.createXMLHttpRequest();
		let _gthis = this;
		let onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			let s;
			try {
				s = r.status;
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				s = null;
			}
			if(s == 0 && typeof(window) != "undefined" && $global.location != null) {
				let protocol = $global.location.protocol.toLowerCase();
				let rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				let isLocal = rlocalProtocol.match(protocol);
				if(isLocal) {
					s = r.response != null ? 200 : 404;
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				_gthis.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				_gthis.req = null;
				_gthis.success(haxe_io_Bytes.ofData(r.response));
			} else if(s == null || s == 0 && r.response == null) {
				_gthis.req = null;
				_gthis.onError("Failed to connect or resolve host");
			} else if(s == null) {
				_gthis.req = null;
				let onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
				_gthis.responseBytes = onreadystatechange;
				_gthis.onError("Http Error #" + r.status);
			} else {
				switch(s) {
				case 12007:
					_gthis.req = null;
					_gthis.onError("Unknown host");
					break;
				case 12029:
					_gthis.req = null;
					_gthis.onError("Failed to connect to host");
					break;
				default:
					_gthis.req = null;
					let onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
					_gthis.responseBytes = onreadystatechange;
					_gthis.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		let uri;
		let _g = this.postBytes;
		let _g1 = this.postData;
		if(_g1 == null) {
			if(_g == null) {
				uri = null;
			} else {
				let bytes = _g;
				uri = new Blob([bytes.b.bufferValue]);
			}
		} else if(_g == null) {
			let str = _g1;
			uri = str;
		} else {
			uri = null;
		}
		if(uri != null) {
			post = true;
		} else {
			let _g = 0;
			let _g1 = this.params;
			while(_g < _g1.length) {
				let p = _g1[_g];
				++_g;
				if(uri == null) {
					uri = "";
				} else {
					uri = (uri == null ? "null" : Std.string(uri)) + "&";
				}
				let s = p.name;
				let value = (uri == null ? "null" : Std.string(uri)) + encodeURIComponent(s) + "=";
				let s1 = p.value;
				uri = value + encodeURIComponent(s1);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				let question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question ? "?" : "&") + (uri == null ? "null" : Std.string(uri)),this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
			r.responseType = "arraybuffer";
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			let e = haxe_Exception.caught(_g).unwrap();
			this.req = null;
			this.onError(e.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.name == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		let _g2 = 0;
		let _g3 = this.headers;
		while(_g2 < _g3.length) {
			let h = _g3[_g2];
			++_g2;
			r.setRequestHeader(h.name,h.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
	static requestUrl(url) {
		let h = new haxe_http_HttpJs(url);
		h.async = false;
		let r = null;
		h.onData = function(d) {
			r = d;
		};
		h.onError = function(e) {
			throw haxe_Exception.thrown(e);
		};
		h.request(false);
		return r;
	}
}
$hxClasses["haxe.http.HttpJs"] = haxe_http_HttpJs;
haxe_http_HttpJs.__name__ = "haxe.http.HttpJs";
haxe_http_HttpJs.__super__ = haxe_http_HttpBase;
Object.assign(haxe_http_HttpJs.prototype, {
	__class__: haxe_http_HttpJs
	,async: null
	,withCredentials: null
	,req: null
});
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : "haxe.io.Error", __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
Object.assign(haxe_iterators_ArrayIterator.prototype, {
	__class__: haxe_iterators_ArrayIterator
	,array: null
	,current: null
});
class haxe_iterators_ArrayKeyValueIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return { value : this.array[this.current], key : this.current++};
	}
}
$hxClasses["haxe.iterators.ArrayKeyValueIterator"] = haxe_iterators_ArrayKeyValueIterator;
haxe_iterators_ArrayKeyValueIterator.__name__ = "haxe.iterators.ArrayKeyValueIterator";
Object.assign(haxe_iterators_ArrayKeyValueIterator.prototype, {
	__class__: haxe_iterators_ArrayKeyValueIterator
	,current: null
	,array: null
});
class haxe_iterators_DynamicAccessIterator {
	constructor(access) {
		this.access = access;
		this.keys = Reflect.fields(access);
		this.index = 0;
	}
	hasNext() {
		return this.index < this.keys.length;
	}
	next() {
		return this.access[this.keys[this.index++]];
	}
}
$hxClasses["haxe.iterators.DynamicAccessIterator"] = haxe_iterators_DynamicAccessIterator;
haxe_iterators_DynamicAccessIterator.__name__ = "haxe.iterators.DynamicAccessIterator";
Object.assign(haxe_iterators_DynamicAccessIterator.prototype, {
	__class__: haxe_iterators_DynamicAccessIterator
	,access: null
	,keys: null
	,index: null
});
class haxe_iterators_DynamicAccessKeyValueIterator {
	constructor(access) {
		this.access = access;
		this.keys = Reflect.fields(access);
		this.index = 0;
	}
	hasNext() {
		return this.index < this.keys.length;
	}
	next() {
		let key = this.keys[this.index++];
		return { value : this.access[key], key : key};
	}
}
$hxClasses["haxe.iterators.DynamicAccessKeyValueIterator"] = haxe_iterators_DynamicAccessKeyValueIterator;
haxe_iterators_DynamicAccessKeyValueIterator.__name__ = "haxe.iterators.DynamicAccessKeyValueIterator";
Object.assign(haxe_iterators_DynamicAccessKeyValueIterator.prototype, {
	__class__: haxe_iterators_DynamicAccessKeyValueIterator
	,access: null
	,keys: null
	,index: null
});
class haxe_iterators_HashMapKeyValueIterator {
	constructor(map) {
		this.map = map;
		this.keys = map.keys.iterator();
	}
	hasNext() {
		return this.keys.hasNext();
	}
	next() {
		let key = this.keys.next();
		let _this = this.map.values;
		let key1 = key.hashCode();
		return { value : _this.h[key1], key : key};
	}
}
$hxClasses["haxe.iterators.HashMapKeyValueIterator"] = haxe_iterators_HashMapKeyValueIterator;
haxe_iterators_HashMapKeyValueIterator.__name__ = "haxe.iterators.HashMapKeyValueIterator";
Object.assign(haxe_iterators_HashMapKeyValueIterator.prototype, {
	__class__: haxe_iterators_HashMapKeyValueIterator
	,map: null
	,keys: null
});
class haxe_iterators_MapKeyValueIterator {
	constructor(map) {
		this.map = map;
		this.keys = map.keys();
	}
	hasNext() {
		return this.keys.hasNext();
	}
	next() {
		let key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
}
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
Object.assign(haxe_iterators_MapKeyValueIterator.prototype, {
	__class__: haxe_iterators_MapKeyValueIterator
	,map: null
	,keys: null
});
class haxe_iterators_StringIterator {
	constructor(s) {
		this.offset = 0;
		this.s = s;
	}
	hasNext() {
		return this.offset < this.s.length;
	}
	next() {
		return this.s.charCodeAt(this.offset++);
	}
}
$hxClasses["haxe.iterators.StringIterator"] = haxe_iterators_StringIterator;
haxe_iterators_StringIterator.__name__ = "haxe.iterators.StringIterator";
Object.assign(haxe_iterators_StringIterator.prototype, {
	__class__: haxe_iterators_StringIterator
	,offset: null
	,s: null
});
class haxe_iterators_StringIteratorUnicode {
	constructor(s) {
		this.offset = 0;
		this.s = s;
	}
	hasNext() {
		return this.offset < this.s.length;
	}
	next() {
		let s = this.s;
		let index = this.offset++;
		let c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		let c1 = c;
		if(c1 >= 65536) {
			this.offset++;
		}
		return c1;
	}
	static unicodeIterator(s) {
		return new haxe_iterators_StringIteratorUnicode(s);
	}
}
$hxClasses["haxe.iterators.StringIteratorUnicode"] = haxe_iterators_StringIteratorUnicode;
haxe_iterators_StringIteratorUnicode.__name__ = "haxe.iterators.StringIteratorUnicode";
Object.assign(haxe_iterators_StringIteratorUnicode.prototype, {
	__class__: haxe_iterators_StringIteratorUnicode
	,offset: null
	,s: null
});
class haxe_iterators_StringKeyValueIterator {
	constructor(s) {
		this.offset = 0;
		this.s = s;
	}
	hasNext() {
		return this.offset < this.s.length;
	}
	next() {
		return { key : this.offset, value : this.s.charCodeAt(this.offset++)};
	}
}
$hxClasses["haxe.iterators.StringKeyValueIterator"] = haxe_iterators_StringKeyValueIterator;
haxe_iterators_StringKeyValueIterator.__name__ = "haxe.iterators.StringKeyValueIterator";
Object.assign(haxe_iterators_StringKeyValueIterator.prototype, {
	__class__: haxe_iterators_StringKeyValueIterator
	,offset: null
	,s: null
});
class haxe_xml_XmlParserException {
	constructor(message,xml,position) {
		this.xml = xml;
		this.message = message;
		this.position = position;
		this.lineNumber = 1;
		this.positionAtLine = 0;
		let _g = 0;
		let _g1 = position;
		while(_g < _g1) {
			let i = _g++;
			let c = xml.charCodeAt(i);
			if(c == 10) {
				this.lineNumber++;
				this.positionAtLine = 0;
			} else if(c != 13) {
				this.positionAtLine++;
			}
		}
	}
	toString() {
		let c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
}
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
Object.assign(haxe_xml_XmlParserException.prototype, {
	__class__: haxe_xml_XmlParserException
	,message: null
	,lineNumber: null
	,positionAtLine: null
	,position: null
	,xml: null
});
class haxe_xml_Parser {
	static parse(str,strict) {
		if(strict == null) {
			strict = false;
		}
		let doc = Xml.createDocument();
		haxe_xml_Parser.doParse(str,strict,0,doc);
		return doc;
	}
	static doParse(str,strict,p,parent) {
		if(p == null) {
			p = 0;
		}
		let xml = null;
		let state = 1;
		let next = 1;
		let aname = null;
		let start = 0;
		let nsubs = 0;
		let nbrackets = 0;
		let c = str.charCodeAt(p);
		let buf = new StringBuf();
		let escapeNext = 1;
		let attrValQuote = -1;
		while(c == c) {
			switch(state) {
			case 0:
				switch(c) {
				case 9:case 10:case 13:case 32:
					break;
				default:
					state = next;
					continue;
				}
				break;
			case 1:
				if(c == 60) {
					state = 0;
					next = 2;
				} else {
					start = p;
					state = 13;
					continue;
				}
				break;
			case 2:
				switch(c) {
				case 33:
					if(str.charCodeAt(p + 1) == 91) {
						p += 2;
						if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
							throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
						}
						p += 5;
						state = 17;
						start = p + 1;
					} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
						if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
							throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
						}
						p += 8;
						state = 16;
						start = p + 1;
					} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
					} else {
						p += 2;
						state = 15;
						start = p + 1;
					}
					break;
				case 47:
					if(parent == null) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
					}
					start = p + 1;
					state = 0;
					next = 10;
					break;
				case 63:
					state = 14;
					start = p;
					break;
				default:
					state = 3;
					start = p;
					continue;
				}
				break;
			case 3:
				if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
					if(p == start) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
					}
					xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
					parent.addChild(xml);
					++nsubs;
					state = 0;
					next = 4;
					continue;
				}
				break;
			case 4:
				switch(c) {
				case 47:
					state = 11;
					break;
				case 62:
					state = 9;
					break;
				default:
					state = 5;
					start = p;
					continue;
				}
				break;
			case 5:
				if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
					if(start == p) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
					}
					let tmp = HxOverrides.substr(str,start,p - start);
					aname = tmp;
					if(xml.exists(aname)) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
					}
					state = 0;
					next = 6;
					continue;
				}
				break;
			case 6:
				if(c == 61) {
					state = 0;
					next = 7;
				} else {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
				}
				break;
			case 7:
				switch(c) {
				case 34:case 39:
					buf = new StringBuf();
					state = 8;
					start = p + 1;
					attrValQuote = c;
					break;
				default:
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
				}
				break;
			case 8:
				switch(c) {
				case 38:
					let len = p - start;
					buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
					state = 18;
					escapeNext = 8;
					start = p + 1;
					break;
				case 60:case 62:
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
					} else if(c == attrValQuote) {
						let len = p - start;
						buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
						let val = buf.b;
						buf = new StringBuf();
						xml.set(aname,val);
						state = 0;
						next = 4;
					}
					break;
				default:
					if(c == attrValQuote) {
						let len = p - start;
						buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
						let val = buf.b;
						buf = new StringBuf();
						xml.set(aname,val);
						state = 0;
						next = 4;
					}
				}
				break;
			case 9:
				p = haxe_xml_Parser.doParse(str,strict,p,xml);
				start = p;
				state = 1;
				break;
			case 10:
				if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
					if(start == p) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
					}
					let v = HxOverrides.substr(str,start,p - start);
					if(parent == null || parent.nodeType != 0) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
					}
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					if(v != parent.nodeName) {
						if(parent.nodeType != Xml.Element) {
							throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
						}
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
					}
					state = 0;
					next = 12;
					continue;
				}
				break;
			case 11:
				if(c == 62) {
					state = 1;
				} else {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
				}
				break;
			case 12:
				if(c == 62) {
					if(nsubs == 0) {
						parent.addChild(Xml.createPCData(""));
					}
					return p;
				} else {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
				}
				break;
			case 13:
				if(c == 60) {
					let len = p - start;
					buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
					let child = Xml.createPCData(buf.b);
					buf = new StringBuf();
					parent.addChild(child);
					++nsubs;
					state = 0;
					next = 2;
				} else if(c == 38) {
					let len = p - start;
					buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
					state = 18;
					escapeNext = 13;
					start = p + 1;
				}
				break;
			case 14:
				if(c == 63 && str.charCodeAt(p + 1) == 62) {
					++p;
					let str1 = HxOverrides.substr(str,start + 1,p - start - 2);
					parent.addChild(Xml.createProcessingInstruction(str1));
					++nsubs;
					state = 1;
				}
				break;
			case 15:
				if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
					parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
					++nsubs;
					p += 2;
					state = 1;
				}
				break;
			case 16:
				if(c == 91) {
					++nbrackets;
				} else if(c == 93) {
					--nbrackets;
				} else if(c == 62 && nbrackets == 0) {
					parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
					++nsubs;
					state = 1;
				}
				break;
			case 17:
				if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
					let child = Xml.createCData(HxOverrides.substr(str,start,p - start));
					parent.addChild(child);
					++nsubs;
					p += 2;
					state = 1;
				}
				break;
			case 18:
				if(c == 59) {
					let s = HxOverrides.substr(str,start,p - start);
					if(s.charCodeAt(0) == 35) {
						let c = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
						buf.b += String.fromCodePoint(c);
					} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
						if(strict) {
							throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
					}
					start = p + 1;
					state = escapeNext;
				} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
					}
					buf.b += String.fromCodePoint(38);
					let len = p - start;
					buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
					--p;
					start = p + 1;
					state = escapeNext;
				}
				break;
			}
			c = str.charCodeAt(++p);
		}
		if(state == 1) {
			start = p;
			state = 13;
		}
		if(state == 13) {
			if(parent.nodeType == 0) {
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
			}
			if(p != start || nsubs == 0) {
				let len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				parent.addChild(Xml.createPCData(buf.b));
				++nsubs;
			}
			return p;
		}
		if(!strict && state == 18 && escapeNext == 13) {
			buf.b += String.fromCodePoint(38);
			let len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
			return p;
		}
		throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
	}
	static isValidChar(c) {
		if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95)) {
			return c == 45;
		} else {
			return true;
		}
	}
}
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
class haxe_xml_Printer {
	constructor(pretty) {
		this.output = new StringBuf();
		this.pretty = pretty;
	}
	writeNode(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			let attribute = value.attributes();
			while(attribute.hasNext()) {
				let attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				let input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				let _g_current = 0;
				let _g_array = value.children;
				while(_g_current < _g_array.length) {
					let child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			let nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				let input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			let commentContent = value.nodeValue;
			let _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			let input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			let _g_current = 0;
			let _g_array = value.children;
			while(_g_current < _g_array.length) {
				let child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	write(input) {
		this.output.b += input == null ? "null" : "" + input;
	}
	newline() {
		if(this.pretty) {
			this.output.b += "\n";
		}
	}
	hasChildren(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		let _g_current = 0;
		let _g_array = value.children;
		while(_g_current < _g_array.length) {
			let child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	static print(xml,pretty) {
		if(pretty == null) {
			pretty = false;
		}
		let printer = new haxe_xml_Printer(pretty);
		printer.writeNode(xml,"");
		return printer.output.b;
	}
}
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
Object.assign(haxe_xml_Printer.prototype, {
	__class__: haxe_xml_Printer
	,output: null
	,pretty: null
});
class js_Boot {
	static isClass(o) {
		return o.__name__;
	}
	static isInterface(o) {
		return o.__isInterface__;
	}
	static isEnum(e) {
		return e.__ename__;
	}
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			let cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			let name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__];
				let n = e.__constructs__[o._hx_index];
				let con = e[n];
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						let _g = [];
						{
							let _g1 = 0;
							let _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								let p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js_Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __interfLoop(cc,cl) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		let intf = cc.__interfaces__;
		if(intf != null && (cc.__super__ == null || cc.__super__.__interfaces__ != intf)) {
			let _g = 0;
			let _g1 = intf.length;
			while(_g < _g1) {
				let i = _g++;
				let i1 = intf[i];
				if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
					return true;
				}
			}
		}
		return js_Boot.__interfLoop(cc.__super__,cl);
	}
	static __instanceof(o,cl) {
		if(cl == null) {
			return false;
		}
		switch(cl) {
		case Array:
			return ((o) instanceof Array);
		case Bool:
			return typeof(o) == "boolean";
		case Dynamic:
			return o != null;
		case Float:
			return typeof(o) == "number";
		case Int:
			if(typeof(o) == "number") {
				return ((o | 0) === o);
			} else {
				return false;
			}
			break;
		case String:
			return typeof(o) == "string";
		default:
			if(o != null) {
				if(typeof(cl) == "function") {
					if(js_Boot.__downcastCheck(o,cl)) {
						return true;
					}
				} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
					if(((o) instanceof cl)) {
						return true;
					}
				}
			} else {
				return false;
			}
			if(cl == Class ? o.__name__ != null : false) {
				return true;
			}
			if(cl == Enum ? o.__ename__ != null : false) {
				return true;
			}
			return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
		}
	}
	static __downcastCheck(o,cl) {
		if(!((o) instanceof cl)) {
			if(cl.__isInterface__) {
				return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static __implements(o,iface) {
		return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
	}
	static __cast(o,t) {
		if(o == null || js_Boot.__instanceof(o,t)) {
			return o;
		} else {
			throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
		}
	}
	static __nativeClassName(o) {
		let name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __isNativeObj(o) {
		return js_Boot.__nativeClassName(o) != null;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js_Boot.__toStr = null;
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
class js_Browser {
	static get_self() {
		return $global;
	}
	static getLocalStorage() {
		try {
			let s = window.localStorage;
			s.getItem("");
			if(s.length == 0) {
				let key = "_hx_" + Math.random();
				s.setItem(key,key);
				s.removeItem(key);
			}
			return s;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return null;
		}
	}
	static getSessionStorage() {
		try {
			let s = window.sessionStorage;
			s.getItem("");
			if(s.length == 0) {
				let key = "_hx_" + Math.random();
				s.setItem(key,key);
				s.removeItem(key);
			}
			return s;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return null;
		}
	}
	static createXMLHttpRequest() {
		if(typeof XMLHttpRequest != "undefined") {
			return new XMLHttpRequest();
		}
		if(typeof ActiveXObject != "undefined") {
			return new ActiveXObject("Microsoft.XMLHTTP");
		}
		throw haxe_Exception.thrown("Unable to create XMLHttpRequest object.");
	}
	static alert(v) {
		window.alert(Std.string(v));
	}
}
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.__properties__ = {get_self: "get_self"};
class js_Lib {
	static debug() {
		debugger;
	}
	static alert(v) {
		alert(js_Boot.__string_rec(v,""));
	}
	static eval(code) {
		return eval(code);
	}
	static get_undefined() {
		return undefined;
	}
	static rethrow() {
	}
	static getOriginalException() {
		return null;
	}
	static getNextHaxeUID() {
		return $global.$haxeUID++;
	}
}
$hxClasses["js.Lib"] = js_Lib;
js_Lib.__name__ = "js.Lib";
js_Lib.__properties__ = {get_undefined: "get_undefined"};
class js_html__$CanvasElement_CanvasUtil {
	static getContextWebGL(canvas,attribs) {
		let name = "webgl";
		let ctx = canvas.getContext(name,attribs);
		if(ctx != null) {
			return ctx;
		}
		let name1 = "experimental-webgl";
		let ctx1 = canvas.getContext(name1,attribs);
		if(ctx1 != null) {
			return ctx1;
		}
		return null;
	}
}
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
class js_lib_KeyValue {
	static get_key(this1) {
		return this1[0];
	}
	static get_value(this1) {
		return this1[1];
	}
}
js_lib_KeyValue.__properties__ = {get_value: "get_value",get_key: "get_key"};
class js_lib_ObjectEntry {
	static get_key(this1) {
		return this1[0];
	}
	static get_value(this1) {
		return this1[1];
	}
}
js_lib_ObjectEntry.__properties__ = {get_value: "get_value",get_key: "get_key"};
class maglev_MagLev {
	constructor() {
		this._listeners = new haxe_ds_StringMap();
		this._methods = new haxe_ds_StringMap();
		let t = new maglev_Telemetry();
		this.register("MindPowered.Telemetry.AddInfo",maglev_MagLevFunction.fromFunction(function(args) {
			let strings = [];
			let i = 0;
			while(i < args.size()) {
				let arg = args.get(i);
				strings.push((js_Boot.__cast(arg , maglev_MagLevString)).getString());
				++i;
			}
			t.addInfo(strings);
			return maglev_MagLevResult.fromResult(maglev_MagLevNull.create());
		}));
		this.register("MindPowered.Telemetry.Send",maglev_MagLevFunction.fromFunction(function(args) {
			let strings = [];
			let i = 0;
			while(i < args.size()) {
				let arg = args.get(i);
				strings.push((js_Boot.__cast(arg , maglev_MagLevString)).getString());
				++i;
			}
			t.send(strings);
			return maglev_MagLevResult.fromResult(maglev_MagLevNull.create());
		}));
	}
	register(method,callback) {
		this._methods.h[method] = callback;
	}
	call(method,args) {
		if(Object.prototype.hasOwnProperty.call(this._methods.h,method)) {
			return this._methods.h[method].call(args);
		} else {
			let err = new maglev_MagLevError(new maglev_MagLevNumber(0),new maglev_MagLevString("Method '" + method + "' not registered"),new maglev_MagLevNull());
			return maglev_MagLevResult.fromError(err);
		}
	}
	listen(event,callback) {
		if(!Object.prototype.hasOwnProperty.call(this._listeners.h,event)) {
			let this1 = this._listeners;
			let v = [];
			this1.h[event] = v;
		}
		this._listeners.h[event].push(callback);
	}
	emit(event,args) {
		if(Object.prototype.hasOwnProperty.call(this._listeners.h,event)) {
			let listeners = this._listeners.h[event];
			let _g = 0;
			while(_g < listeners.length) {
				let listener = listeners[_g];
				++_g;
				listener.call(args);
			}
		}
	}
	static getInstance(key) {
		if(!Object.prototype.hasOwnProperty.call(maglev_MagLev._instances.h,key)) {
			let this1 = maglev_MagLev._instances;
			let v = new maglev_MagLev();
			this1.h[key] = v;
		}
		return maglev_MagLev._instances.h[key];
	}
}
$hxClasses["maglev.MagLev"] = $hx_exports["maglev"]["MagLev"] = maglev_MagLev;
maglev_MagLev.__name__ = "maglev.MagLev";
Object.assign(maglev_MagLev.prototype, {
	__class__: maglev_MagLev
	,_methods: null
	,_listeners: null
});
class maglev_MagLevResult {
	constructor(async) {
		this.async = async;
		this.result = null;
		this.error = null;
		this.complete = false;
		this.accepts = [];
		this.rejects = [];
	}
	isAsync() {
		return this.async;
	}
	isComplete() {
		return this.complete;
	}
	isError() {
		if(!this.complete) {
			throw haxe_Exception.thrown("isError(): Future result not complete");
		}
		return this.result == null;
	}
	getResult() {
		if(!this.complete) {
			throw haxe_Exception.thrown("getResult(): Future result not complete");
		}
		return this.result;
	}
	setResult(res) {
		if(this.complete) {
			throw haxe_Exception.thrown("setResult(): Result was already complete");
		}
		this.result = res;
		this.error = null;
		this.complete = true;
		let _g = 0;
		let _g1 = this.accepts;
		while(_g < _g1.length) {
			let accept = _g1[_g];
			++_g;
			accept(res);
		}
	}
	getError() {
		if(!this.complete) {
			throw haxe_Exception.thrown("getError(): Future result not complete");
		}
		return this.error;
	}
	setError(err) {
		if(this.complete) {
			throw haxe_Exception.thrown("setError(): Result was already complete");
		}
		this.result = null;
		this.error = err;
		this.complete = true;
		let _g = 0;
		let _g1 = this.rejects;
		while(_g < _g1.length) {
			let reject = _g1[_g];
			++_g;
			reject(err);
		}
	}
	onResult(callback) {
		let future = maglev_MagLevResult.createAsync();
		let accept = function(result) {
			let ret = callback(result);
			if(ret.isAsync()) {
				ret.onResult(function(result2) {
					future.setResult(result2);
					return maglev_MagLevResult.fromResult(maglev_MagLevNull.create());
				});
			}
			return maglev_MagLevResult.fromResult(maglev_MagLevNull.create());
		};
		this.accepts.push(accept);
		if(this.complete) {
			if(!this.isError()) {
				accept(this.getResult());
			}
		}
		return future;
	}
	onError(callback) {
		let future = maglev_MagLevResult.createAsync();
		let reject = function(error) {
			let ret = callback(error);
			if(ret.isAsync()) {
				ret.onError(function(error2) {
					future.setError(error2);
					return maglev_MagLevResult.fromResult(maglev_MagLevNull.create());
				});
			}
			return maglev_MagLevResult.fromResult(maglev_MagLevNull.create());
		};
		this.rejects.push(reject);
		if(this.complete) {
			if(this.isError()) {
				reject(this.getError());
			}
		}
		return future;
	}
	getType() {
		return 110;
	}
	isEqual(other) {
		if(this.isError() == other.isError()) {
			if(this.isError()) {
				return this.getError().isEqual(other.getError());
			} else {
				return this.getResult().isEqual(other.getResult());
			}
		} else {
			return false;
		}
	}
	toJson() {
		let res = "null";
		let err = "null";
		if(this.isError()) {
			err = this.error.toJson().getString();
		} else {
			res = this.result.toJson().getString();
		}
		return new maglev_MagLevString("{\"result\": " + res + ", \"error\": " + err + "}");
	}
	static fromResult(res) {
		let result = new maglev_MagLevResult(false);
		result.setResult(res);
		return result;
	}
	static fromError(err) {
		let result = new maglev_MagLevResult(false);
		result.setError(err);
		return result;
	}
	static createAsync() {
		let result = new maglev_MagLevResult(true);
		return result;
	}
	static getStaticType() {
		return 110;
	}
}
$hxClasses["maglev.MagLevResult"] = $hx_exports["maglev"]["MagLevResult"] = maglev_MagLevResult;
maglev_MagLevResult.__name__ = "maglev.MagLevResult";
Object.assign(maglev_MagLevResult.prototype, {
	__class__: maglev_MagLevResult
	,result: null
	,error: null
	,async: null
	,complete: null
	,accepts: null
	,rejects: null
});
class maglev_MagLevError {
	constructor(code,message,data) {
		this.code = code;
		this.message = message;
		this.data = data;
	}
	getCode() {
		return this.code.getInt();
	}
	getMessage() {
		return this.message.getString();
	}
	getData() {
		return this.data;
	}
	getType() {
		return 100;
	}
	isEqual(other) {
		let same = true;
		same = same && this.code.isEqual(new maglev_MagLevNumber(other.getCode()));
		same = same && this.message.isEqual(new maglev_MagLevString(other.getMessage()));
		same = same && this.data.isEqual(other.getData());
		return same;
	}
	toJson() {
		return new maglev_MagLevString("{\"code\": " + Std.string(this.code.toJson()) + ", \"message\": " + Std.string(this.message.toJson()) + ", \"data\": " + Std.string(this.data.toJson()) + "}");
	}
	static create(code,message,data) {
		let code2 = new maglev_MagLevNumber(code);
		let message2 = new maglev_MagLevString(message);
		return new maglev_MagLevError(code2,message2,data);
	}
	static getStaticType() {
		return 100;
	}
}
$hxClasses["maglev.MagLevError"] = $hx_exports["maglev"]["MagLevError"] = maglev_MagLevError;
maglev_MagLevError.__name__ = "maglev.MagLevError";
Object.assign(maglev_MagLevError.prototype, {
	__class__: maglev_MagLevError
	,code: null
	,message: null
	,data: null
});
class maglev_MagLevAny {
	constructor() {
		if(maglev_MagLevAny._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
	}
	toJson() {
		throw haxe_Exception.thrown("toJson does not exist for MagLevAny");
	}
	getType() {
		throw haxe_Exception.thrown("getType does not exist for MagLevAny");
	}
	isEqual(o) {
		throw haxe_Exception.thrown("isEqual does not exist for MagLevAny");
	}
}
$hxClasses["maglev.MagLevAny"] = $hx_exports["maglev"]["MagLevAny"] = maglev_MagLevAny;
maglev_MagLevAny.__name__ = "maglev.MagLevAny";
Object.assign(maglev_MagLevAny.prototype, {
	__class__: maglev_MagLevAny
});
class maglev_MagLevFunction extends maglev_MagLevAny {
	constructor(value,name) {
		maglev_MagLevAny._hx_skip_constructor = true;
		super();
		maglev_MagLevAny._hx_skip_constructor = false;
		this._hx_constructor(value,name);
	}
	_hx_constructor(value,name) {
		this.name = name;
		this.value = value;
		super._hx_constructor();
	}
	call(args) {
		return this.value(args);
	}
	hasName() {
		return this.name != null;
	}
	getName() {
		return this.name;
	}
	getType() {
		return 200;
	}
	isEqual(other) {
		if(other.getType() == this.getType()) {
			let o = js_Boot.__cast(other , maglev_MagLevFunction);
			if(this.hasName() && o.hasName()) {
				return this.getName() == o.getName();
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	toJson() {
		if(this.hasName()) {
			return new maglev_MagLevString("<function " + this.name + ">");
		} else {
			return new maglev_MagLevString("<anon func>");
		}
	}
	static fromFunction(value) {
		return new maglev_MagLevFunction(value);
	}
	static fromNamedFunction(value,name) {
		return new maglev_MagLevFunction(value,name);
	}
	static getStaticType() {
		return 200;
	}
}
$hxClasses["maglev.MagLevFunction"] = $hx_exports["maglev"]["MagLevFunction"] = maglev_MagLevFunction;
maglev_MagLevFunction.__name__ = "maglev.MagLevFunction";
maglev_MagLevFunction.__super__ = maglev_MagLevAny;
Object.assign(maglev_MagLevFunction.prototype, {
	__class__: maglev_MagLevFunction
	,name: null
	,value: null
});
class maglev_MagLevObject extends maglev_MagLevAny {
	constructor() {
		maglev_MagLevAny._hx_skip_constructor = true;
		super();
		maglev_MagLevAny._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.values = new haxe_ds_StringMap();
		super._hx_constructor();
	}
	clear() {
		this.values.h = Object.create(null);
	}
	exists(key) {
		return Object.prototype.hasOwnProperty.call(this.values.h,key);
	}
	get(key) {
		return maglev_MagLevNull.wrap(this.values.h[key]);
	}
	keys() {
		let arr = new maglev_MagLevArray();
		let k = haxe_ds_StringMap.keysIterator(this.values.h);
		while(k.hasNext()) {
			let k1 = k.next();
			arr.push(new maglev_MagLevString(k1));
		}
		return arr;
	}
	remove(key) {
		let _this = this.values;
		if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
			delete(_this.h[key]);
			return true;
		} else {
			return false;
		}
	}
	set(key,value) {
		let this1 = this.values;
		let value1 = maglev_MagLevNull.wrap(value);
		this1.h[key] = value1;
	}
	getStringMap() {
		return this.values;
	}
	getType() {
		return 6;
	}
	isEqual(other) {
		if(other.getType() == this.getType()) {
			let obj = js_Boot.__cast(other , maglev_MagLevObject);
			let key = haxe_ds_StringMap.keysIterator(this.values.h);
			while(key.hasNext()) {
				let key1 = key.next();
				let found = false;
				let equal = false;
				let key2 = haxe_ds_StringMap.keysIterator(obj.getStringMap().h);
				while(key2.hasNext()) {
					let key21 = key2.next();
					if(key1 == key21) {
						found = true;
						let val = this.values.h[key1];
						let val2 = obj.values.h[key21];
						if(val.isEqual(val2)) {
							equal = true;
						}
					}
				}
				if(!found || !equal) {
					return false;
				}
			}
			return true;
		} else {
			return false;
		}
	}
	toJson() {
		let s = "{";
		let first = true;
		let key = haxe_ds_StringMap.keysIterator(this.values.h);
		while(key.hasNext()) {
			let key1 = key.next();
			if(!first) {
				s += ", ";
			}
			s += key1;
			s += ": ";
			s += Std.string(this.values.h[key1].toJson());
			first = false;
		}
		s += "}";
		return new maglev_MagLevString(s);
	}
	static create() {
		return new maglev_MagLevObject();
	}
	static getStaticType() {
		return 6;
	}
}
$hxClasses["maglev.MagLevObject"] = $hx_exports["maglev"]["MagLevObject"] = maglev_MagLevObject;
maglev_MagLevObject.__name__ = "maglev.MagLevObject";
maglev_MagLevObject.__super__ = maglev_MagLevAny;
Object.assign(maglev_MagLevObject.prototype, {
	__class__: maglev_MagLevObject
	,values: null
});
class maglev_MagLevArray extends maglev_MagLevAny {
	constructor() {
		maglev_MagLevAny._hx_skip_constructor = true;
		super();
		maglev_MagLevAny._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.values = [];
		super._hx_constructor();
	}
	size() {
		return this.values.length;
	}
	pop() {
		return maglev_MagLevNull.wrap(this.values.pop());
	}
	push(x) {
		this.values.push(x);
		return this.size();
	}
	shift() {
		return maglev_MagLevNull.wrap(this.values.shift());
	}
	unshift(x) {
		this.values.unshift(maglev_MagLevNull.wrap(x));
	}
	reverse() {
		this.values.reverse();
	}
	get(i) {
		return maglev_MagLevNull.wrap(this.values[i]);
	}
	set(i,value) {
		this.values[i] = maglev_MagLevNull.wrap(value);
	}
	getType() {
		return 5;
	}
	isEqual(other) {
		if(other.getType() == this.getType()) {
			let o = js_Boot.__cast(other , maglev_MagLevArray);
			if(this.size() == o.size()) {
				let arr = js_Boot.__cast(other , maglev_MagLevArray);
				let _g = 0;
				let _g1 = this.values;
				while(_g < _g1.length) {
					let item = _g1[_g];
					++_g;
					let found = false;
					let _g2 = 0;
					let _g3 = arr.values;
					while(_g2 < _g3.length) {
						let item2 = _g3[_g2];
						++_g2;
						if(item.isEqual(item2)) {
							found = true;
						}
					}
					if(!found) {
						return false;
					}
				}
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	toJson() {
		let s = "[";
		let first = true;
		let _g = 0;
		let _g1 = this.values;
		while(_g < _g1.length) {
			let item = _g1[_g];
			++_g;
			if(!first) {
				s += ", ";
			}
			s += item.toJson().getString();
			first = false;
		}
		s += "]";
		return new maglev_MagLevString(s);
	}
	static create() {
		return new maglev_MagLevArray();
	}
	static getStaticType() {
		return 5;
	}
}
$hxClasses["maglev.MagLevArray"] = $hx_exports["maglev"]["MagLevArray"] = maglev_MagLevArray;
maglev_MagLevArray.__name__ = "maglev.MagLevArray";
maglev_MagLevArray.__super__ = maglev_MagLevAny;
Object.assign(maglev_MagLevArray.prototype, {
	__class__: maglev_MagLevArray
	,values: null
});
class maglev_MagLevNumber extends maglev_MagLevAny {
	constructor(value) {
		maglev_MagLevAny._hx_skip_constructor = true;
		super();
		maglev_MagLevAny._hx_skip_constructor = false;
		this._hx_constructor(value);
	}
	_hx_constructor(value) {
		this.value = value;
		super._hx_constructor();
	}
	getFloat() {
		return this.value;
	}
	getInt() {
		return this.value | 0;
	}
	getType() {
		return 4;
	}
	isEqual(other) {
		if(other.getType() == this.getType()) {
			let o = js_Boot.__cast(other , maglev_MagLevNumber);
			return this.getFloat() == o.getFloat();
		} else {
			return false;
		}
	}
	toJson() {
		return new maglev_MagLevString(Std.string(this.value));
	}
	static fromFloat(value) {
		return new maglev_MagLevNumber(value);
	}
	static fromInt(value) {
		return new maglev_MagLevNumber(value);
	}
	static getStaticType() {
		return 4;
	}
}
$hxClasses["maglev.MagLevNumber"] = $hx_exports["maglev"]["MagLevNumber"] = maglev_MagLevNumber;
maglev_MagLevNumber.__name__ = "maglev.MagLevNumber";
maglev_MagLevNumber.__super__ = maglev_MagLevAny;
Object.assign(maglev_MagLevNumber.prototype, {
	__class__: maglev_MagLevNumber
	,value: null
});
class maglev_MagLevString extends maglev_MagLevAny {
	constructor(value) {
		maglev_MagLevAny._hx_skip_constructor = true;
		super();
		maglev_MagLevAny._hx_skip_constructor = false;
		this._hx_constructor(value);
	}
	_hx_constructor(value) {
		this.value = value;
		super._hx_constructor();
	}
	getString() {
		return this.value;
	}
	getType() {
		return 3;
	}
	isEqual(other) {
		if(other.getType() == this.getType()) {
			let o = js_Boot.__cast(other , maglev_MagLevString);
			return this.getString() == o.getString();
		} else {
			return false;
		}
	}
	toJson() {
		return new maglev_MagLevString("\"" + this.value + "\"");
	}
	static fromString(value) {
		return new maglev_MagLevString(value);
	}
	static getStaticType() {
		return 3;
	}
}
$hxClasses["maglev.MagLevString"] = $hx_exports["maglev"]["MagLevString"] = maglev_MagLevString;
maglev_MagLevString.__name__ = "maglev.MagLevString";
maglev_MagLevString.__super__ = maglev_MagLevAny;
Object.assign(maglev_MagLevString.prototype, {
	__class__: maglev_MagLevString
	,value: null
});
class maglev_MagLevBoolean extends maglev_MagLevAny {
	constructor(value) {
		maglev_MagLevAny._hx_skip_constructor = true;
		super();
		maglev_MagLevAny._hx_skip_constructor = false;
		this._hx_constructor(value);
	}
	_hx_constructor(value) {
		this.value = value;
		super._hx_constructor();
	}
	getBool() {
		return this.value;
	}
	getType() {
		return 2;
	}
	isEqual(other) {
		if(other.getType() == this.getType()) {
			let o = js_Boot.__cast(other , maglev_MagLevBoolean);
			return this.getBool() == o.getBool();
		} else {
			return false;
		}
	}
	toJson() {
		if(this.value) {
			return new maglev_MagLevString("true");
		} else {
			return new maglev_MagLevString("false");
		}
	}
	static fromBool(value) {
		return new maglev_MagLevBoolean(value);
	}
	static getStaticType() {
		return 2;
	}
}
$hxClasses["maglev.MagLevBoolean"] = $hx_exports["maglev"]["MagLevBoolean"] = maglev_MagLevBoolean;
maglev_MagLevBoolean.__name__ = "maglev.MagLevBoolean";
maglev_MagLevBoolean.__super__ = maglev_MagLevAny;
Object.assign(maglev_MagLevBoolean.prototype, {
	__class__: maglev_MagLevBoolean
	,value: null
});
class maglev_MagLevNull extends maglev_MagLevAny {
	constructor() {
		super();
	}
	getType() {
		return 1;
	}
	isEqual(other) {
		if(other.getType() == this.getType()) {
			return true;
		} else {
			return false;
		}
	}
	toJson() {
		return new maglev_MagLevString("null");
	}
	static create() {
		return new maglev_MagLevNull();
	}
	static getStaticType() {
		return 1;
	}
	static wrap(o) {
		if(o == null) {
			return new maglev_MagLevNull();
		} else {
			return o;
		}
	}
}
$hxClasses["maglev.MagLevNull"] = $hx_exports["maglev"]["MagLevNull"] = maglev_MagLevNull;
maglev_MagLevNull.__name__ = "maglev.MagLevNull";
maglev_MagLevNull.__super__ = maglev_MagLevAny;
Object.assign(maglev_MagLevNull.prototype, {
	__class__: maglev_MagLevNull
});
class maglev_MagLevJs {
	constructor(maglev) {
		this.maglev = maglev;
	}
	register(method,callback) {
		let _gthis = this;
		let myfunc = function(args) {
			let arr = [];
			let i = 0;
			while(i < args.size()) {
				arr.push(_gthis.convertToJs(args.get(i)));
				++i;
			}
			let ret = callback(arr);
			if(((ret) instanceof Promise)) {
				let res = maglev_MagLevResult.createAsync();
				let resolveHandler = function(r) {
					res.setResult(_gthis.convertToMagLev(r));
					return null;
				};
				let rejectHandler = function(r) {
					let err = maglev_MagLevError.create(0,"Promise Rejected",_gthis.convertToMagLev(r));
					res.setError(err);
					return null;
				};
				let p = ret;
				p.then(resolveHandler,rejectHandler);
				return res;
			} else {
				let result = _gthis.convertToMagLev(ret);
				return maglev_MagLevResult.fromResult(result);
			}
		};
		let mycallback = new maglev_MagLevFunction(myfunc);
		this.maglev.register(method,mycallback);
	}
	call(method,args) {
		let myargs = new maglev_MagLevArray();
		let _gthis = this;
		let _g = 0;
		while(_g < args.length) {
			let arg = args[_g];
			++_g;
			myargs.push(this.convertToMagLev(arg));
		}
		let myresult = this.maglev.call(method,myargs);
		let p = new Promise(function(resolve,reject) {
			myresult.onResult(function(result) {
				resolve(_gthis.convertToJs(result));
				return maglev_MagLevResult.fromResult(maglev_MagLevNull.create());
			});
			myresult.onError(function(error) {
				reject(error.getMessage());
				return maglev_MagLevResult.fromResult(maglev_MagLevNull.create());
			});
		});
		return p;
	}
	listen(event,callback) {
		let _gthis = this;
		let mysub = function(args) {
			let arr = [];
			let i = 0;
			while(i < args.size()) {
				arr.push(_gthis.convertToJs(args.get(i)));
				++i;
			}
			callback(event,arr);
			return null;
		};
		let mycallback = new maglev_MagLevFunction(mysub);
		this.maglev.listen(event,mycallback);
	}
	emit(event,args) {
		let myargs = new maglev_MagLevArray();
		let _g = 0;
		while(_g < args.length) {
			let arg = args[_g];
			++_g;
			myargs.push(this.convertToMagLev(arg));
		}
		this.maglev.emit(event,myargs);
	}
	fromEntries(entries) {
		throw haxe_Exception.thrown("should not throw");
	}
	convertToJs(x) {
		let _gthis = this;
		if(x.getType() == maglev_MagLevNull.getStaticType()) {
			return null;
		} else if(x.getType() == maglev_MagLevBoolean.getStaticType()) {
			let y = js_Boot.__cast(x , maglev_MagLevBoolean);
			return y.getBool();
		} else if(x.getType() == maglev_MagLevString.getStaticType()) {
			let y = js_Boot.__cast(x , maglev_MagLevString);
			return y.getString();
		} else if(x.getType() == maglev_MagLevNumber.getStaticType()) {
			let y = js_Boot.__cast(x , maglev_MagLevNumber);
			return y.getFloat();
		} else if(x.getType() == maglev_MagLevArray.getStaticType()) {
			let y = js_Boot.__cast(x , maglev_MagLevArray);
			let arr = [];
			let i = 0;
			while(i < y.size()) {
				arr.push(this.convertToJs(y.get(i)));
				++i;
			}
			return arr;
		} else if(x.getType() == maglev_MagLevObject.getStaticType()) {
			let y = js_Boot.__cast(x , maglev_MagLevObject);
			let obj = { };
			let keys = y.keys();
			let i = 0;
			while(i < keys.size()) {
				let k = (js_Boot.__cast(keys.get(i) , maglev_MagLevString)).getString();
				let v = this.convertToJs(y.get(k));
				let descr = { value : v};
				obj = Object.defineProperty(obj,k,descr);
				++i;
			}
			return obj;
		} else if(x.getType() == maglev_MagLevFunction.getStaticType()) {
			let y = js_Boot.__cast(x , maglev_MagLevFunction);
			let f = function(args) {
				let arr = new maglev_MagLevArray();
				let _g = 0;
				while(_g < args.length) {
					let arg = args[_g];
					++_g;
					arr.push(_gthis.convertToMagLev(arg));
				}
				let ret = y.call(arr);
				if(ret.isError()) {
					throw haxe_Exception.thrown(ret.getError().getMessage());
				} else {
					return _gthis.convertToJs(ret.getResult());
				}
			};
			return f;
		} else {
			throw haxe_Exception.thrown("convertToJs: unknown type");
		}
	}
	convertToMagLev(x) {
		let _gthis = this;
		if(x == null) {
			return new maglev_MagLevNull();
		} else if(typeof(x) == "boolean") {
			return new maglev_MagLevBoolean(js_Boot.__cast(x , Bool));
		} else if(typeof(x) == "string") {
			return new maglev_MagLevString(js_Boot.__cast(x , String));
		} else if(typeof(x) == "number") {
			return new maglev_MagLevNumber(js_Boot.__cast(x , Float));
		} else if(typeof(x) == "object" && ((x) instanceof Array)) {
			let arr = x;
			let arr2 = new maglev_MagLevArray();
			let _g = 0;
			while(_g < arr.length) {
				let item = arr[_g];
				++_g;
				arr2.push(this.convertToMagLev(item));
			}
			return arr2;
		} else if(typeof(x) == "object") {
			let obj = new maglev_MagLevObject();
			let original = x;
			let _g = 0;
			let _g1 = Reflect.fields(original);
			while(_g < _g1.length) {
				let field = _g1[_g];
				++_g;
				let val = Reflect.getProperty(original,field);
				obj.set(field,this.convertToMagLev(val));
			}
			return obj;
		} else if(typeof(x) == "function") {
			let func = x;
			let myfunc = function(args) {
				let arr = [];
				let i = 0;
				while(i < args.size()) {
					arr.push(_gthis.convertToJs(args.get(i)));
					++i;
				}
				let ret = func(arr);
				if(((ret) instanceof Promise)) {
					let res = maglev_MagLevResult.createAsync();
					let resolveHandler = function(r) {
						res.setResult(_gthis.convertToMagLev(r));
						return null;
					};
					let rejectHandler = function(r) {
						let err = maglev_MagLevError.create(0,"Promise Rejected",_gthis.convertToMagLev(r));
						res.setError(err);
						return null;
					};
					let p = ret;
					p.then(resolveHandler,rejectHandler);
					return res;
				} else {
					let result = _gthis.convertToMagLev(ret);
					return maglev_MagLevResult.fromResult(result);
				}
			};
			return new maglev_MagLevFunction(myfunc);
		} else {
			throw haxe_Exception.thrown("convertToMagLev: unknown type - are you passing only primitives to maglev?");
		}
	}
	static getInstance(key) {
		let instance = new maglev_MagLevJs(maglev_MagLev.getInstance(key));
		return instance;
	}
}
$hxClasses["maglev.MagLevJs"] = $hx_exports["maglev"]["MagLevJs"] = maglev_MagLevJs;
maglev_MagLevJs.__name__ = "maglev.MagLevJs";
Object.assign(maglev_MagLevJs.prototype, {
	__class__: maglev_MagLevJs
	,maglev: null
});
class maglev_Telemetry {
	constructor() {
		this.info = [];
	}
	addInfo(args) {
		let _g = 0;
		while(_g < args.length) {
			let arg = args[_g];
			++_g;
			this.info.push(arg);
		}
	}
	send(args) {
		let url = "http://telemetry.mindpowered.link/send?";
		let _g = 0;
		let _g1 = this.info;
		while(_g < _g1.length) {
			let item = _g1[_g];
			++_g;
			url += encodeURIComponent(item) + "&";
		}
		let _g2 = 0;
		while(_g2 < args.length) {
			let item = args[_g2];
			++_g2;
			url += encodeURIComponent(item) + "&";
		}
		haxe_http_HttpJs.requestUrl(url);
	}
}
$hxClasses["maglev.Telemetry"] = $hx_exports["maglev"]["Telemetry"] = maglev_Telemetry;
maglev_Telemetry.__name__ = "maglev.Telemetry";
Object.assign(maglev_Telemetry.prototype, {
	__class__: maglev_Telemetry
	,info: null
});
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
EReg.escapeRe = new RegExp("[.*+?^${}()|[\\]\\\\]","g");
haxe_SysTools.winMetaCharacters = [32,40,41,37,33,94,34,60,62,38,124,10,13,44,59];
StringTools.winMetaCharacters = haxe_SysTools.winMetaCharacters;
StringTools.MIN_SURROGATE_CODE_POINT = 65536;
XmlType.Element = 0;
XmlType.PCData = 1;
XmlType.CData = 2;
XmlType.Comment = 3;
XmlType.DocType = 4;
XmlType.ProcessingInstruction = 5;
XmlType.Document = 6;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
haxe_Int32._mul = Math.imul != null ? Math.imul : function(a,b) {
	return a * (b & 65535) + (a * (b >>> 16) << 16 | 0) | 0;
};
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_crypto_Base64.URL_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
haxe_crypto_Base64.URL_BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.URL_CHARS);
haxe_http_HttpBase._hx_skip_constructor = false;
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	let h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
maglev_MagLev._instances = new haxe_ds_StringMap();
maglev_MagLevAny._hx_skip_constructor = false;
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
var maglev = $hx_exports["maglev"];
